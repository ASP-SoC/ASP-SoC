-- Audio.vhd

-- Generated using ACDS version 16.1 203

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Audio is
	port (
		audio_clk_clk : out   std_logic;        -- audio_clk.clk
		clk_clk       : in    std_logic := '0'; --       clk.clk
		i2c_SDAT      : inout std_logic := '0'; --       i2c.SDAT
		i2c_SCLK      : out   std_logic;        --          .SCLK
		i2s_adcdat    : in    std_logic := '0'; --       i2s.adcdat
		i2s_adclrck   : in    std_logic := '0'; --          .adclrck
		i2s_bclk      : in    std_logic := '0'; --          .bclk
		i2s_dacdat    : out   std_logic;        --          .dacdat
		i2s_daclrck   : in    std_logic := '0'; --          .daclrck
		reset_reset_n : in    std_logic := '0'  --     reset.reset_n
	);
end entity Audio;

architecture rtl of Audio is
	component AudioCodecAvalon is
		generic (
			gDataWidth    : natural := 24;
			gDataWidthLen : natural := 5
		);
		port (
			csi_clk         : in  std_logic                     := 'X';             -- clk
			rsi_reset_n     : in  std_logic                     := 'X';             -- reset_n
			AUD_ADCDAT      : in  std_logic                     := 'X';             -- adcdat
			AUD_ADCLRCK     : in  std_logic                     := 'X';             -- adclrck
			AUD_BCLK        : in  std_logic                     := 'X';             -- bclk
			AUD_DACDAT      : out std_logic;                                        -- dacdat
			AUD_DACLRCK     : in  std_logic                     := 'X';             -- daclrck
			asi_left_data   : in  std_logic_vector(23 downto 0) := (others => 'X'); -- data
			asi_left_valid  : in  std_logic                     := 'X';             -- valid
			asi_right_data  : in  std_logic_vector(23 downto 0) := (others => 'X'); -- data
			asi_right_valid : in  std_logic                     := 'X';             -- valid
			aso_left_data   : out std_logic_vector(23 downto 0);                    -- data
			aso_left_valid  : out std_logic;                                        -- valid
			aso_right_data  : out std_logic_vector(23 downto 0);                    -- data
			aso_right_valid : out std_logic                                         -- valid
		);
	end component AudioCodecAvalon;

	component TbdFIR is
		generic (
			gDataWidth      : natural := 24;
			gNrAddressLines : natural := 4
		);
		port (
			csi_clk          : in  std_logic                     := 'X';             -- clk
			rsi_reset_n      : in  std_logic                     := 'X';             -- reset_n
			avs_s0_address   : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- address
			avs_s0_write     : in  std_logic                     := 'X';             -- write
			avs_s0_writedata : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			avs_s0_read      : in  std_logic                     := 'X';             -- read
			avs_s0_readdata  : out std_logic_vector(31 downto 0);                    -- readdata
			asi_valid        : in  std_logic                     := 'X';             -- valid
			asi_data         : in  std_logic_vector(23 downto 0) := (others => 'X'); -- data
			aso_valid        : out std_logic;                                        -- valid
			aso_data         : out std_logic_vector(23 downto 0)                     -- data
		);
	end component TbdFIR;

	component Audio_audio_config is
		port (
			clk         : in    std_logic                     := 'X';             -- clk
			reset       : in    std_logic                     := 'X';             -- reset
			address     : in    std_logic_vector(1 downto 0)  := (others => 'X'); -- address
			byteenable  : in    std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			read        : in    std_logic                     := 'X';             -- read
			write       : in    std_logic                     := 'X';             -- write
			writedata   : in    std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			readdata    : out   std_logic_vector(31 downto 0);                    -- readdata
			waitrequest : out   std_logic;                                        -- waitrequest
			I2C_SDAT    : inout std_logic                     := 'X';             -- export
			I2C_SCLK    : out   std_logic                                         -- export
		);
	end component Audio_audio_config;

	component Audio_audio_pll is
		port (
			ref_clk_clk        : in  std_logic := 'X'; -- clk
			ref_reset_reset    : in  std_logic := 'X'; -- reset
			audio_clk_clk      : out std_logic;        -- clk
			reset_source_reset : out std_logic         -- reset
		);
	end component Audio_audio_pll;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal avalon_fir_0_avalon_streaming_source_0_valid : std_logic;                     -- Avalon_FIR_0:aso_valid -> AudioCodecAvalon_0:asi_left_valid
	signal avalon_fir_0_avalon_streaming_source_0_data  : std_logic_vector(23 downto 0); -- Avalon_FIR_0:aso_data -> AudioCodecAvalon_0:asi_left_data
	signal audiocodecavalon_0_left_source_valid         : std_logic;                     -- AudioCodecAvalon_0:aso_left_valid -> Avalon_FIR_0:asi_valid
	signal audiocodecavalon_0_left_source_data          : std_logic_vector(23 downto 0); -- AudioCodecAvalon_0:aso_left_data -> Avalon_FIR_0:asi_data
	signal audiocodecavalon_0_right_source_valid        : std_logic;                     -- AudioCodecAvalon_0:aso_right_valid -> AudioCodecAvalon_0:asi_right_valid
	signal audiocodecavalon_0_right_source_data         : std_logic_vector(23 downto 0); -- AudioCodecAvalon_0:aso_right_data -> AudioCodecAvalon_0:asi_right_data
	signal rst_controller_reset_out_reset               : std_logic;                     -- rst_controller:reset_out -> [audio_config:reset, rst_controller_reset_out_reset:in]
	signal reset_reset_n_ports_inv                      : std_logic;                     -- reset_reset_n:inv -> [audio_pll:ref_reset_reset, rst_controller:reset_in0]
	signal rst_controller_reset_out_reset_ports_inv     : std_logic;                     -- rst_controller_reset_out_reset:inv -> [AudioCodecAvalon_0:rsi_reset_n, Avalon_FIR_0:rsi_reset_n]

begin

	audiocodecavalon_0 : component AudioCodecAvalon
		generic map (
			gDataWidth    => 24,
			gDataWidthLen => 5
		)
		port map (
			csi_clk         => clk_clk,                                      --        clock.clk
			rsi_reset_n     => rst_controller_reset_out_reset_ports_inv,     --        reset.reset_n
			AUD_ADCDAT      => i2s_adcdat,                                   --  conduit_end.adcdat
			AUD_ADCLRCK     => i2s_adclrck,                                  --             .adclrck
			AUD_BCLK        => i2s_bclk,                                     --             .bclk
			AUD_DACDAT      => i2s_dacdat,                                   --             .dacdat
			AUD_DACLRCK     => i2s_daclrck,                                  --             .daclrck
			asi_left_data   => avalon_fir_0_avalon_streaming_source_0_data,  --    left_sink.data
			asi_left_valid  => avalon_fir_0_avalon_streaming_source_0_valid, --             .valid
			asi_right_data  => audiocodecavalon_0_right_source_data,         --   right_sink.data
			asi_right_valid => audiocodecavalon_0_right_source_valid,        --             .valid
			aso_left_data   => audiocodecavalon_0_left_source_data,          --  left_source.data
			aso_left_valid  => audiocodecavalon_0_left_source_valid,         --             .valid
			aso_right_data  => audiocodecavalon_0_right_source_data,         -- right_source.data
			aso_right_valid => audiocodecavalon_0_right_source_valid         --             .valid
		);

	avalon_fir_0 : component TbdFIR
		generic map (
			gDataWidth      => 24,
			gNrAddressLines => 4
		)
		port map (
			csi_clk          => clk_clk,                                      --                     clock.clk
			rsi_reset_n      => rst_controller_reset_out_reset_ports_inv,     --                     reset.reset_n
			avs_s0_address   => open,                                         --                        s0.address
			avs_s0_write     => open,                                         --                          .write
			avs_s0_writedata => open,                                         --                          .writedata
			avs_s0_read      => open,                                         --                          .read
			avs_s0_readdata  => open,                                         --                          .readdata
			asi_valid        => audiocodecavalon_0_left_source_valid,         --   avalon_streaming_sink_0.valid
			asi_data         => audiocodecavalon_0_left_source_data,          --                          .data
			aso_valid        => avalon_fir_0_avalon_streaming_source_0_valid, -- avalon_streaming_source_0.valid
			aso_data         => avalon_fir_0_avalon_streaming_source_0_data   --                          .data
		);

	audio_config : component Audio_audio_config
		port map (
			clk         => clk_clk,                        --                    clk.clk
			reset       => rst_controller_reset_out_reset, --                  reset.reset
			address     => open,                           -- avalon_av_config_slave.address
			byteenable  => open,                           --                       .byteenable
			read        => open,                           --                       .read
			write       => open,                           --                       .write
			writedata   => open,                           --                       .writedata
			readdata    => open,                           --                       .readdata
			waitrequest => open,                           --                       .waitrequest
			I2C_SDAT    => i2c_SDAT,                       --     external_interface.export
			I2C_SCLK    => i2c_SCLK                        --                       .export
		);

	audio_pll : component Audio_audio_pll
		port map (
			ref_clk_clk        => clk_clk,                 --      ref_clk.clk
			ref_reset_reset    => reset_reset_n_ports_inv, --    ref_reset.reset
			audio_clk_clk      => audio_clk_clk,           --    audio_clk.clk
			reset_source_reset => open                     -- reset_source.reset
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,        -- reset_in0.reset
			clk            => clk_clk,                        --       clk.clk
			reset_out      => rst_controller_reset_out_reset, -- reset_out.reset
			reset_req      => open,                           -- (terminated)
			reset_req_in0  => '0',                            -- (terminated)
			reset_in1      => '0',                            -- (terminated)
			reset_req_in1  => '0',                            -- (terminated)
			reset_in2      => '0',                            -- (terminated)
			reset_req_in2  => '0',                            -- (terminated)
			reset_in3      => '0',                            -- (terminated)
			reset_req_in3  => '0',                            -- (terminated)
			reset_in4      => '0',                            -- (terminated)
			reset_req_in4  => '0',                            -- (terminated)
			reset_in5      => '0',                            -- (terminated)
			reset_req_in5  => '0',                            -- (terminated)
			reset_in6      => '0',                            -- (terminated)
			reset_req_in6  => '0',                            -- (terminated)
			reset_in7      => '0',                            -- (terminated)
			reset_req_in7  => '0',                            -- (terminated)
			reset_in8      => '0',                            -- (terminated)
			reset_req_in8  => '0',                            -- (terminated)
			reset_in9      => '0',                            -- (terminated)
			reset_req_in9  => '0',                            -- (terminated)
			reset_in10     => '0',                            -- (terminated)
			reset_req_in10 => '0',                            -- (terminated)
			reset_in11     => '0',                            -- (terminated)
			reset_req_in11 => '0',                            -- (terminated)
			reset_in12     => '0',                            -- (terminated)
			reset_req_in12 => '0',                            -- (terminated)
			reset_in13     => '0',                            -- (terminated)
			reset_req_in13 => '0',                            -- (terminated)
			reset_in14     => '0',                            -- (terminated)
			reset_req_in14 => '0',                            -- (terminated)
			reset_in15     => '0',                            -- (terminated)
			reset_req_in15 => '0'                             -- (terminated)
		);

	reset_reset_n_ports_inv <= not reset_reset_n;

	rst_controller_reset_out_reset_ports_inv <= not rst_controller_reset_out_reset;

end architecture rtl; -- of Audio
