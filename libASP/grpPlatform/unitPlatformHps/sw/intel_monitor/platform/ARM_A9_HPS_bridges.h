#ifndef _ALTERA_ARM_A9_HPS_BRIDGES_H_
#define _ALTERA_ARM_A9_HPS_BRIDGES_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'Platform' in
 * file 'Platform.sopcinfo'.
 */

/*
 * This file contains macros for module 'ARM_A9_HPS_bridges' and devices
 * connected to the following masters:
 *   axi_f2h
 *   h2f_lw
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'pio_switches', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_SWITCHES_'.
 * The prefix is the slave descriptor.
 */
#define PIO_SWITCHES_COMPONENT_TYPE altera_avalon_pio
#define PIO_SWITCHES_COMPONENT_NAME pio_switches
#define PIO_SWITCHES_BASE 0x0
#define PIO_SWITCHES_SPAN 16
#define PIO_SWITCHES_END 0xf
#define PIO_SWITCHES_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_SWITCHES_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_SWITCHES_CAPTURE 0
#define PIO_SWITCHES_DATA_WIDTH 10
#define PIO_SWITCHES_DO_TEST_BENCH_WIRING 0
#define PIO_SWITCHES_DRIVEN_SIM_VALUE 0
#define PIO_SWITCHES_EDGE_TYPE NONE
#define PIO_SWITCHES_FREQ 50000000
#define PIO_SWITCHES_HAS_IN 1
#define PIO_SWITCHES_HAS_OUT 0
#define PIO_SWITCHES_HAS_TRI 0
#define PIO_SWITCHES_IRQ_TYPE NONE
#define PIO_SWITCHES_RESET_VALUE 0

/*
 * Macros for device 'pio_leds', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LEDS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LEDS_COMPONENT_TYPE altera_avalon_pio
#define PIO_LEDS_COMPONENT_NAME pio_leds
#define PIO_LEDS_BASE 0x10
#define PIO_LEDS_SPAN 16
#define PIO_LEDS_END 0x1f
#define PIO_LEDS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LEDS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LEDS_CAPTURE 0
#define PIO_LEDS_DATA_WIDTH 10
#define PIO_LEDS_DO_TEST_BENCH_WIRING 0
#define PIO_LEDS_DRIVEN_SIM_VALUE 0
#define PIO_LEDS_EDGE_TYPE NONE
#define PIO_LEDS_FREQ 50000000
#define PIO_LEDS_HAS_IN 0
#define PIO_LEDS_HAS_OUT 1
#define PIO_LEDS_HAS_TRI 0
#define PIO_LEDS_IRQ_TYPE NONE
#define PIO_LEDS_RESET_VALUE 1

/*
 * Macros for device 'pio_keys', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_KEYS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_KEYS_COMPONENT_TYPE altera_avalon_pio
#define PIO_KEYS_COMPONENT_NAME pio_keys
#define PIO_KEYS_BASE 0x20
#define PIO_KEYS_SPAN 16
#define PIO_KEYS_END 0x2f
#define PIO_KEYS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_KEYS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_KEYS_CAPTURE 0
#define PIO_KEYS_DATA_WIDTH 3
#define PIO_KEYS_DO_TEST_BENCH_WIRING 0
#define PIO_KEYS_DRIVEN_SIM_VALUE 0
#define PIO_KEYS_EDGE_TYPE NONE
#define PIO_KEYS_FREQ 50000000
#define PIO_KEYS_HAS_IN 1
#define PIO_KEYS_HAS_OUT 0
#define PIO_KEYS_HAS_TRI 0
#define PIO_KEYS_IRQ_TYPE NONE
#define PIO_KEYS_RESET_VALUE 0

/*
 * Macros for device 'pio_hex3_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX3_5_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX3_5_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX3_5_COMPONENT_NAME pio_hex3_5
#define PIO_HEX3_5_BASE 0x30
#define PIO_HEX3_5_SPAN 16
#define PIO_HEX3_5_END 0x3f
#define PIO_HEX3_5_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX3_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX3_5_CAPTURE 0
#define PIO_HEX3_5_DATA_WIDTH 21
#define PIO_HEX3_5_DO_TEST_BENCH_WIRING 0
#define PIO_HEX3_5_DRIVEN_SIM_VALUE 0
#define PIO_HEX3_5_EDGE_TYPE NONE
#define PIO_HEX3_5_FREQ 50000000
#define PIO_HEX3_5_HAS_IN 0
#define PIO_HEX3_5_HAS_OUT 1
#define PIO_HEX3_5_HAS_TRI 0
#define PIO_HEX3_5_IRQ_TYPE NONE
#define PIO_HEX3_5_RESET_VALUE 1963763

/*
 * Macros for device 'pio_hex0_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX0_2_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX0_2_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX0_2_COMPONENT_NAME pio_hex0_2
#define PIO_HEX0_2_BASE 0x40
#define PIO_HEX0_2_SPAN 16
#define PIO_HEX0_2_END 0x4f
#define PIO_HEX0_2_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX0_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX0_2_CAPTURE 0
#define PIO_HEX0_2_DATA_WIDTH 21
#define PIO_HEX0_2_DO_TEST_BENCH_WIRING 0
#define PIO_HEX0_2_DRIVEN_SIM_VALUE 0
#define PIO_HEX0_2_EDGE_TYPE NONE
#define PIO_HEX0_2_FREQ 50000000
#define PIO_HEX0_2_HAS_IN 0
#define PIO_HEX0_2_HAS_OUT 1
#define PIO_HEX0_2_HAS_TRI 0
#define PIO_HEX0_2_IRQ_TYPE NONE
#define PIO_HEX0_2_RESET_VALUE 1797689

/*
 * Macros for device 'audio_audio_config', class 'altera_up_avalon_audio_and_video_config'
 * The macros are prefixed with 'AUDIO_AUDIO_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_AUDIO_CONFIG_COMPONENT_TYPE altera_up_avalon_audio_and_video_config
#define AUDIO_AUDIO_CONFIG_COMPONENT_NAME audio_audio_config
#define AUDIO_AUDIO_CONFIG_BASE 0x50
#define AUDIO_AUDIO_CONFIG_SPAN 16
#define AUDIO_AUDIO_CONFIG_END 0x5f

/*
 * Macros for device 'audio_I2S_Codec_Pin_Multiplex_0', class 'I2S_Codec_Pin_Multiplex'
 * The macros are prefixed with 'AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_COMPONENT_TYPE I2S_Codec_Pin_Multiplex
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_COMPONENT_NAME audio_I2S_Codec_Pin_Multiplex_0
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_BASE 0x60
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_SPAN 4
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_END 0x63

/*
 * Macros for device 'ASP_white_noise_right', class 'WhiteNoise'
 * The macros are prefixed with 'ASP_WHITE_NOISE_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_WHITE_NOISE_RIGHT_COMPONENT_TYPE WhiteNoise
#define ASP_WHITE_NOISE_RIGHT_COMPONENT_NAME ASP_white_noise_right
#define ASP_WHITE_NOISE_RIGHT_BASE 0x64
#define ASP_WHITE_NOISE_RIGHT_SPAN 4
#define ASP_WHITE_NOISE_RIGHT_END 0x67

/*
 * Macros for device 'ASP_mult_out', class 'Multiply'
 * The macros are prefixed with 'ASP_MULT_OUT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_MULT_OUT_COMPONENT_TYPE Multiply
#define ASP_MULT_OUT_COMPONENT_NAME ASP_mult_out
#define ASP_MULT_OUT_BASE 0x68
#define ASP_MULT_OUT_SPAN 8
#define ASP_MULT_OUT_END 0x6f

/*
 * Macros for device 'ASP_dds_right_s1_config', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_RIGHT_S1_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_RIGHT_S1_CONFIG_COMPONENT_TYPE Dds
#define ASP_DDS_RIGHT_S1_CONFIG_COMPONENT_NAME ASP_dds_right
#define ASP_DDS_RIGHT_S1_CONFIG_BASE 0x70
#define ASP_DDS_RIGHT_S1_CONFIG_SPAN 8
#define ASP_DDS_RIGHT_S1_CONFIG_END 0x77

/*
 * Macros for device 'ASP_dds_left_s1_config', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_LEFT_S1_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_LEFT_S1_CONFIG_COMPONENT_TYPE Dds
#define ASP_DDS_LEFT_S1_CONFIG_COMPONENT_NAME ASP_dds_left
#define ASP_DDS_LEFT_S1_CONFIG_BASE 0x78
#define ASP_DDS_LEFT_S1_CONFIG_SPAN 8
#define ASP_DDS_LEFT_S1_CONFIG_END 0x7f

/*
 * Macros for device 'ASP_white_noise_left', class 'WhiteNoise'
 * The macros are prefixed with 'ASP_WHITE_NOISE_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_WHITE_NOISE_LEFT_COMPONENT_TYPE WhiteNoise
#define ASP_WHITE_NOISE_LEFT_COMPONENT_NAME ASP_white_noise_left
#define ASP_WHITE_NOISE_LEFT_BASE 0x80
#define ASP_WHITE_NOISE_LEFT_SPAN 4
#define ASP_WHITE_NOISE_LEFT_END 0x83

/*
 * Macros for device 'ASP_mux_out', class 'ChannelMux'
 * The macros are prefixed with 'ASP_MUX_OUT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_MUX_OUT_COMPONENT_TYPE ChannelMux
#define ASP_MUX_OUT_COMPONENT_NAME ASP_mux_out
#define ASP_MUX_OUT_BASE 0x84
#define ASP_MUX_OUT_SPAN 4
#define ASP_MUX_OUT_END 0x87

/*
 * Macros for device 'ASP_delay_right', class 'Delay'
 * The macros are prefixed with 'ASP_DELAY_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DELAY_RIGHT_COMPONENT_TYPE Delay
#define ASP_DELAY_RIGHT_COMPONENT_NAME ASP_delay_right
#define ASP_DELAY_RIGHT_BASE 0x88
#define ASP_DELAY_RIGHT_SPAN 4
#define ASP_DELAY_RIGHT_END 0x8b

/*
 * Macros for device 'ASP_delay_left', class 'Delay'
 * The macros are prefixed with 'ASP_DELAY_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DELAY_LEFT_COMPONENT_TYPE Delay
#define ASP_DELAY_LEFT_COMPONENT_NAME ASP_delay_left
#define ASP_DELAY_LEFT_BASE 0x8c
#define ASP_DELAY_LEFT_SPAN 4
#define ASP_DELAY_LEFT_END 0x8f

/*
 * Macros for device 'ASP_channel_mux_in', class 'ChannelMux'
 * The macros are prefixed with 'ASP_CHANNEL_MUX_IN_'.
 * The prefix is the slave descriptor.
 */
#define ASP_CHANNEL_MUX_IN_COMPONENT_TYPE ChannelMux
#define ASP_CHANNEL_MUX_IN_COMPONENT_NAME ASP_channel_mux_in
#define ASP_CHANNEL_MUX_IN_BASE 0x90
#define ASP_CHANNEL_MUX_IN_SPAN 4
#define ASP_CHANNEL_MUX_IN_END 0x93

/*
 * Macros for device 'ASP_add_right_dds', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_RIGHT_DDS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_RIGHT_DDS_COMPONENT_TYPE AddChannels
#define ASP_ADD_RIGHT_DDS_COMPONENT_NAME ASP_add_right_dds
#define ASP_ADD_RIGHT_DDS_BASE 0x94
#define ASP_ADD_RIGHT_DDS_SPAN 4
#define ASP_ADD_RIGHT_DDS_END 0x97

/*
 * Macros for device 'ASP_add_right_noise', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_RIGHT_NOISE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_RIGHT_NOISE_COMPONENT_TYPE AddChannels
#define ASP_ADD_RIGHT_NOISE_COMPONENT_NAME ASP_add_right_noise
#define ASP_ADD_RIGHT_NOISE_BASE 0x98
#define ASP_ADD_RIGHT_NOISE_SPAN 4
#define ASP_ADD_RIGHT_NOISE_END 0x9b

/*
 * Macros for device 'ASP_add_left_noise', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_LEFT_NOISE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_LEFT_NOISE_COMPONENT_TYPE AddChannels
#define ASP_ADD_LEFT_NOISE_COMPONENT_NAME ASP_add_left_noise
#define ASP_ADD_LEFT_NOISE_BASE 0x9c
#define ASP_ADD_LEFT_NOISE_SPAN 4
#define ASP_ADD_LEFT_NOISE_END 0x9f

/*
 * Macros for device 'ASP_add_left_dds', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_LEFT_DDS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_LEFT_DDS_COMPONENT_TYPE AddChannels
#define ASP_ADD_LEFT_DDS_COMPONENT_NAME ASP_add_left_dds
#define ASP_ADD_LEFT_DDS_BASE 0xa0
#define ASP_ADD_LEFT_DDS_SPAN 4
#define ASP_ADD_LEFT_DDS_END 0xa3

/*
 * Macros for device 'ASP_fir_left_s1_enable', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_LEFT_S1_ENABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_LEFT_S1_ENABLE_COMPONENT_TYPE FirFilter
#define ASP_FIR_LEFT_S1_ENABLE_COMPONENT_NAME ASP_fir_left
#define ASP_FIR_LEFT_S1_ENABLE_BASE 0xa4
#define ASP_FIR_LEFT_S1_ENABLE_SPAN 4
#define ASP_FIR_LEFT_S1_ENABLE_END 0xa7

/*
 * Macros for device 'ASP_fir_right_s1_enable', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_RIGHT_S1_ENABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_RIGHT_S1_ENABLE_COMPONENT_TYPE FirFilter
#define ASP_FIR_RIGHT_S1_ENABLE_COMPONENT_NAME ASP_fir_right
#define ASP_FIR_RIGHT_S1_ENABLE_BASE 0xa8
#define ASP_FIR_RIGHT_S1_ENABLE_SPAN 4
#define ASP_FIR_RIGHT_S1_ENABLE_END 0xab

/*
 * Macros for device 'ASP_fir_right_s0_coeffs', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_RIGHT_S0_COEFFS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_RIGHT_S0_COEFFS_COMPONENT_TYPE FirFilter
#define ASP_FIR_RIGHT_S0_COEFFS_COMPONENT_NAME ASP_fir_right
#define ASP_FIR_RIGHT_S0_COEFFS_BASE 0x200
#define ASP_FIR_RIGHT_S0_COEFFS_SPAN 512
#define ASP_FIR_RIGHT_S0_COEFFS_END 0x3ff

/*
 * Macros for device 'ASP_fir_left_s0_coeffs', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_LEFT_S0_COEFFS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_LEFT_S0_COEFFS_COMPONENT_TYPE FirFilter
#define ASP_FIR_LEFT_S0_COEFFS_COMPONENT_NAME ASP_fir_left
#define ASP_FIR_LEFT_S0_COEFFS_BASE 0x400
#define ASP_FIR_LEFT_S0_COEFFS_SPAN 512
#define ASP_FIR_LEFT_S0_COEFFS_END 0x5ff

/*
 * Macros for device 'ASP_dds_right_s0_table', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_RIGHT_S0_TABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_RIGHT_S0_TABLE_COMPONENT_TYPE Dds
#define ASP_DDS_RIGHT_S0_TABLE_COMPONENT_NAME ASP_dds_right
#define ASP_DDS_RIGHT_S0_TABLE_BASE 0x4000
#define ASP_DDS_RIGHT_S0_TABLE_SPAN 16384
#define ASP_DDS_RIGHT_S0_TABLE_END 0x7fff

/*
 * Macros for device 'ASP_dds_left_s0_table', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_LEFT_S0_TABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_LEFT_S0_TABLE_COMPONENT_TYPE Dds
#define ASP_DDS_LEFT_S0_TABLE_COMPONENT_NAME ASP_dds_left
#define ASP_DDS_LEFT_S0_TABLE_BASE 0x8000
#define ASP_DDS_LEFT_S0_TABLE_SPAN 16384
#define ASP_DDS_LEFT_S0_TABLE_END 0xbfff


#endif /* _ALTERA_ARM_A9_HPS_BRIDGES_H_ */
