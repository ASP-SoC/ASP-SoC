
/home/free_hat/git/ASP-SoC/libASP/grpPlatform/unitPlatformHps/sw/intel_monitor/platform/wm8731.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 1c 0f 00 00 20 0f 00 00 24 0f 00 00     @....... ...$...
  30:	28 0f 00 00 18 0f 00 00 2c 0f 00 00 30 0f 00 00     (.......,...0...

00000040 <__cs3_reset>:
  40:	ea000024 	b	d8 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f8084 	ldr	r8, [pc, #132]	; d0 <__cs3_start_c+0x8c>
  48:	e3580000 	cmp	r8, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2488001 	sub	r8, r8, #1
  54:	0a00001c 	beq	cc <__cs3_start_c+0x88>
  58:	e59f7074 	ldr	r7, [pc, #116]	; d4 <__cs3_start_c+0x90>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e2475010 	sub	r5, r7, #16
  68:	e8951020 	ldm	r5, {r5, r12}
  6c:	e5176008 	ldr	r6, [r7, #-8]
  70:	e155000c 	cmp	r5, r12
  74:	008cc006 	addeq	r12, r12, r6
  78:	0a000007 	beq	9c <__cs3_start_c+0x58>
  7c:	e3560000 	cmp	r6, #0
  80:	0a000005 	beq	9c <__cs3_start_c+0x58>
  84:	e1a0e005 	mov	lr, r5
  88:	e8be000c 	ldm	lr!, {r2, r3}
  8c:	e065400e 	rsb	r4, r5, lr
  90:	e1560004 	cmp	r6, r4
  94:	e8ac000c 	stmia	r12!, {r2, r3}
  98:	1afffffa 	bne	88 <__cs3_start_c+0x44>
  9c:	e517e004 	ldr	lr, [r7, #-4]
  a0:	e35e0000 	cmp	lr, #0
  a4:	11a0300c 	movne	r3, r12
  a8:	0a000003 	beq	bc <__cs3_start_c+0x78>
  ac:	e8a30003 	stmia	r3!, {r0, r1}
  b0:	e06c2003 	rsb	r2, r12, r3
  b4:	e15e0002 	cmp	lr, r2
  b8:	1afffffb 	bne	ac <__cs3_start_c+0x68>
  bc:	e2488001 	sub	r8, r8, #1
  c0:	e3780001 	cmn	r8, #1
  c4:	e2877014 	add	r7, r7, #20
  c8:	1affffe5 	bne	64 <__cs3_start_c+0x20>
  cc:	eb000378 	bl	eb4 <__cs3_premain>
  d0:	00000001 	.word	0x00000001
  d4:	00001054 	.word	0x00001054

000000d8 <__cs3_start_asm_sim>:
  d8:	e28f103c 	add	r1, pc, #60	; 0x3c
  dc:	e3a00016 	mov	r0, #22
  e0:	ef123456 	svc	0x00123456
  e4:	e3500000 	cmp	r0, #0
  e8:	ba000008 	blt	110 <__cs3_start_asm_sim+0x38>
  ec:	e59f2028 	ldr	r2, [pc, #40]	; 11c <__cs3_heap_start_ptr>
  f0:	e59fd01c 	ldr	sp, [pc, #28]	; 114 <__cs3_start_asm_sim+0x3c>
  f4:	e5920008 	ldr	r0, [r2, #8]
  f8:	e3500000 	cmp	r0, #0
  fc:	11a0d000 	movne	sp, r0
 100:	e59f1010 	ldr	r1, [pc, #16]	; 118 <__cs3_start_asm_sim+0x40>
 104:	e5920004 	ldr	r0, [r2, #4]
 108:	e3500000 	cmp	r0, #0
 10c:	15810000 	strne	r0, [r1]
 110:	eaffffcb 	b	44 <__cs3_start_c>
 114:	3ffffff8 	.word	0x3ffffff8
 118:	000014e0 	.word	0x000014e0

0000011c <__cs3_heap_start_ptr>:
 11c:	00001508 	.word	0x00001508

00000120 <_start>:
 120:	e51fd000 	ldr	sp, [pc, #-0]	; 128 <_start+0x8>
 124:	eaffffc6 	b	44 <__cs3_start_c>
 128:	3ffffff8 	.word	0x3ffffff8

0000012c <deregister_tm_clones>:
 12c:	e92d4008 	push	{r3, lr}
 130:	e59f002c 	ldr	r0, [pc, #44]	; 164 <deregister_tm_clones+0x38>
 134:	e59f302c 	ldr	r3, [pc, #44]	; 168 <deregister_tm_clones+0x3c>
 138:	e0603003 	rsb	r3, r0, r3
 13c:	e3530006 	cmp	r3, #6
 140:	8a000001 	bhi	14c <deregister_tm_clones+0x20>
 144:	e8bd4008 	pop	{r3, lr}
 148:	e12fff1e 	bx	lr
 14c:	e59f3018 	ldr	r3, [pc, #24]	; 16c <deregister_tm_clones+0x40>
 150:	e3530000 	cmp	r3, #0
 154:	0afffffa 	beq	144 <deregister_tm_clones+0x18>
 158:	e1a0e00f 	mov	lr, pc
 15c:	e12fff13 	bx	r3
 160:	eafffff7 	b	144 <deregister_tm_clones+0x18>
 164:	000014e8 	.word	0x000014e8
 168:	000014eb 	.word	0x000014eb
 16c:	00000000 	.word	0x00000000

00000170 <register_tm_clones>:
 170:	e92d4008 	push	{r3, lr}
 174:	e59f0034 	ldr	r0, [pc, #52]	; 1b0 <register_tm_clones+0x40>
 178:	e59f3034 	ldr	r3, [pc, #52]	; 1b4 <register_tm_clones+0x44>
 17c:	e0603003 	rsb	r3, r0, r3
 180:	e1a03143 	asr	r3, r3, #2
 184:	e0833fa3 	add	r3, r3, r3, lsr #31
 188:	e1b010c3 	asrs	r1, r3, #1
 18c:	1a000001 	bne	198 <register_tm_clones+0x28>
 190:	e8bd4008 	pop	{r3, lr}
 194:	e12fff1e 	bx	lr
 198:	e59f2018 	ldr	r2, [pc, #24]	; 1b8 <register_tm_clones+0x48>
 19c:	e3520000 	cmp	r2, #0
 1a0:	0afffffa 	beq	190 <register_tm_clones+0x20>
 1a4:	e1a0e00f 	mov	lr, pc
 1a8:	e12fff12 	bx	r2
 1ac:	eafffff7 	b	190 <register_tm_clones+0x20>
 1b0:	000014e8 	.word	0x000014e8
 1b4:	000014e8 	.word	0x000014e8
 1b8:	00000000 	.word	0x00000000

000001bc <__do_global_dtors_aux>:
 1bc:	e92d4010 	push	{r4, lr}
 1c0:	e59f402c 	ldr	r4, [pc, #44]	; 1f4 <__do_global_dtors_aux+0x38>
 1c4:	e5d43000 	ldrb	r3, [r4]
 1c8:	e3530000 	cmp	r3, #0
 1cc:	1a000006 	bne	1ec <__do_global_dtors_aux+0x30>
 1d0:	ebffffd5 	bl	12c <deregister_tm_clones>
 1d4:	e59f301c 	ldr	r3, [pc, #28]	; 1f8 <__do_global_dtors_aux+0x3c>
 1d8:	e3530000 	cmp	r3, #0
 1dc:	159f0018 	ldrne	r0, [pc, #24]	; 1fc <__do_global_dtors_aux+0x40>
 1e0:	1320f000 	nopne	{0}
 1e4:	e3a03001 	mov	r3, #1
 1e8:	e5c43000 	strb	r3, [r4]
 1ec:	e8bd4010 	pop	{r4, lr}
 1f0:	e12fff1e 	bx	lr
 1f4:	000014e8 	.word	0x000014e8
 1f8:	00000000 	.word	0x00000000
 1fc:	00000fbc 	.word	0x00000fbc

00000200 <frame_dummy>:
 200:	e92d4008 	push	{r3, lr}
 204:	e59f3034 	ldr	r3, [pc, #52]	; 240 <frame_dummy+0x40>
 208:	e3530000 	cmp	r3, #0
 20c:	159f0030 	ldrne	r0, [pc, #48]	; 244 <frame_dummy+0x44>
 210:	159f1030 	ldrne	r1, [pc, #48]	; 248 <frame_dummy+0x48>
 214:	1320f000 	nopne	{0}
 218:	e59f002c 	ldr	r0, [pc, #44]	; 24c <frame_dummy+0x4c>
 21c:	e5903000 	ldr	r3, [r0]
 220:	e3530000 	cmp	r3, #0
 224:	0a000003 	beq	238 <frame_dummy+0x38>
 228:	e59f3020 	ldr	r3, [pc, #32]	; 250 <frame_dummy+0x50>
 22c:	e3530000 	cmp	r3, #0
 230:	11a0e00f 	movne	lr, pc
 234:	112fff13 	bxne	r3
 238:	e8bd4008 	pop	{r3, lr}
 23c:	eaffffcb 	b	170 <register_tm_clones>
 240:	00000000 	.word	0x00000000
 244:	00000fbc 	.word	0x00000fbc
 248:	000014ec 	.word	0x000014ec
 24c:	00001058 	.word	0x00001058
 250:	00000000 	.word	0x00000000

00000254 <WriteReg>:
	0x01,								// activate interface
	0x01, 								// no reset
};


int WriteReg(int addr, int val){
 254:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 258:	e28db000 	add	r11, sp, #0
 25c:	e24dd00c 	sub	sp, sp, #12
 260:	e50b0008 	str	r0, [r11, #-8]
 264:	e50b100c 	str	r1, [r11, #-12]
	*WM8731IF_ADDR = addr;
 268:	e3a03058 	mov	r3, #88	; 0x58
 26c:	e34f3f20 	movt	r3, #65312	; 0xff20
 270:	e51b2008 	ldr	r2, [r11, #-8]
 274:	e5832000 	str	r2, [r3]
	while(((*WM8731IF_STATUS) & (1<<WM8731_READY_BIT_OFFS)) == 0);	// wait on Ready bit to be set
 278:	e1a00000 	nop			; (mov r0, r0)
 27c:	e3a03054 	mov	r3, #84	; 0x54
 280:	e34f3f20 	movt	r3, #65312	; 0xff20
 284:	e5933000 	ldr	r3, [r3]
 288:	e2033002 	and	r3, r3, #2
 28c:	e3530000 	cmp	r3, #0
 290:	0afffff9 	beq	27c <WriteReg+0x28>

	*WM8731IF_DATA = val;
 294:	e3a0305c 	mov	r3, #92	; 0x5c
 298:	e34f3f20 	movt	r3, #65312	; 0xff20
 29c:	e51b200c 	ldr	r2, [r11, #-12]
 2a0:	e5832000 	str	r2, [r3]
	while(((*WM8731IF_STATUS) & (1<<WM8731_READY_BIT_OFFS)) == 0);	// wait on Ready bit to be set
 2a4:	e1a00000 	nop			; (mov r0, r0)
 2a8:	e3a03054 	mov	r3, #84	; 0x54
 2ac:	e34f3f20 	movt	r3, #65312	; 0xff20
 2b0:	e5933000 	ldr	r3, [r3]
 2b4:	e2033002 	and	r3, r3, #2
 2b8:	e3530000 	cmp	r3, #0
 2bc:	0afffff9 	beq	2a8 <WriteReg+0x54>

	if(((*WM8731IF_STATUS) & (1<<WM8731_ACK_BIT_OFFS)) == 0){			// error in write
 2c0:	e3a03054 	mov	r3, #84	; 0x54
 2c4:	e34f3f20 	movt	r3, #65312	; 0xff20
 2c8:	e5933000 	ldr	r3, [r3]
 2cc:	e2033001 	and	r3, r3, #1
 2d0:	e3530000 	cmp	r3, #0
 2d4:	1a000001 	bne	2e0 <WriteReg+0x8c>
		return -1;
 2d8:	e3e03000 	mvn	r3, #0
 2dc:	ea000000 	b	2e4 <WriteReg+0x90>
	}

	return 0;
 2e0:	e3a03000 	mov	r3, #0
}
 2e4:	e1a00003 	mov	r0, r3
 2e8:	e24bd000 	sub	sp, r11, #0
 2ec:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 2f0:	e12fff1e 	bx	lr

000002f4 <SetVolume>:



int SetVolume(TChannel ch, TSourceSink ss, int vol){
 2f4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 2f8:	e28db000 	add	r11, sp, #0
 2fc:	e24dd00c 	sub	sp, sp, #12
 300:	e1a03001 	mov	r3, r1
 304:	e50b200c 	str	r2, [r11, #-12]
 308:	e1a02000 	mov	r2, r0
 30c:	e54b2005 	strb	r2, [r11, #-5]
 310:	e54b3006 	strb	r3, [r11, #-6]
	if( vol > WM8731_MAX_VOL ){					//clip the volume to the max range
 314:	e51b300c 	ldr	r3, [r11, #-12]
 318:	e353001f 	cmp	r3, #31
 31c:	da000002 	ble	32c <SetVolume+0x38>
		vol = WM8731_MAX_VOL;
 320:	e3a0301f 	mov	r3, #31
 324:	e50b300c 	str	r3, [r11, #-12]
 328:	ea000004 	b	340 <SetVolume+0x4c>
	}else if(vol < WM8731_MIN_VOL){
 32c:	e51b300c 	ldr	r3, [r11, #-12]
 330:	e3530000 	cmp	r3, #0
 334:	aa000001 	bge	340 <SetVolume+0x4c>
		vol = WM8731_MIN_VOL;
 338:	e3a03000 	mov	r3, #0
 33c:	e50b300c 	str	r3, [r11, #-12]
	}

	if(ss == LINE){
 340:	e55b3006 	ldrb	r3, [r11, #-6]
 344:	e3530000 	cmp	r3, #0
 348:	1a00000f 	bne	38c <SetVolume+0x98>
		if(ch == LEFT){				
 34c:	e55b3005 	ldrb	r3, [r11, #-5]
 350:	e3530000 	cmp	r3, #0
 354:	1a000004 	bne	36c <SetVolume+0x78>
			wm8731.LLineIN = vol;			//mute is overwritten
 358:	e51b200c 	ldr	r2, [r11, #-12]
 35c:	e3013060 	movw	r3, #4192	; 0x1060
 360:	e3403000 	movt	r3, #0
 364:	e5832000 	str	r2, [r3]
 368:	ea000019 	b	3d4 <SetVolume+0xe0>
		}else if(ch == RIGHT){
 36c:	e55b3005 	ldrb	r3, [r11, #-5]
 370:	e3530001 	cmp	r3, #1
 374:	1a000016 	bne	3d4 <SetVolume+0xe0>
			wm8731.RLineIN = vol;			//mute is overwritten
 378:	e51b200c 	ldr	r2, [r11, #-12]
 37c:	e3013060 	movw	r3, #4192	; 0x1060
 380:	e3403000 	movt	r3, #0
 384:	e5832004 	str	r2, [r3, #4]
 388:	ea000011 	b	3d4 <SetVolume+0xe0>
		}

	}else if( ss == HEADPHONE ){
 38c:	e55b3006 	ldrb	r3, [r11, #-6]
 390:	e3530001 	cmp	r3, #1
 394:	1a00000e 	bne	3d4 <SetVolume+0xe0>
		if(ch == LEFT){				
 398:	e55b3005 	ldrb	r3, [r11, #-5]
 39c:	e3530000 	cmp	r3, #0
 3a0:	1a000004 	bne	3b8 <SetVolume+0xc4>
			wm8731.LHeadOUT = vol;			//mute is overwritten
 3a4:	e51b200c 	ldr	r2, [r11, #-12]
 3a8:	e3013060 	movw	r3, #4192	; 0x1060
 3ac:	e3403000 	movt	r3, #0
 3b0:	e5832008 	str	r2, [r3, #8]
 3b4:	ea000006 	b	3d4 <SetVolume+0xe0>
		}else if(ch == RIGHT){
 3b8:	e55b3005 	ldrb	r3, [r11, #-5]
 3bc:	e3530001 	cmp	r3, #1
 3c0:	1a000003 	bne	3d4 <SetVolume+0xe0>
			wm8731.RHeadOUT = vol;			//mute is overwritten
 3c4:	e51b200c 	ldr	r2, [r11, #-12]
 3c8:	e3013060 	movw	r3, #4192	; 0x1060
 3cc:	e3403000 	movt	r3, #0
 3d0:	e583200c 	str	r2, [r3, #12]
	}

	
	

	return 0;
 3d4:	e3a03000 	mov	r3, #0
}
 3d8:	e1a00003 	mov	r0, r3
 3dc:	e24bd000 	sub	sp, r11, #0
 3e0:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 3e4:	e12fff1e 	bx	lr

000003e8 <WriteRegSet>:

int WriteRegSet(){
 3e8:	e92d4800 	push	{r11, lr}
 3ec:	e28db004 	add	r11, sp, #4
 3f0:	e24dd008 	sub	sp, sp, #8
	int i;
	int * pStructure = &(wm8731.LLineIN);
 3f4:	e3013060 	movw	r3, #4192	; 0x1060
 3f8:	e3403000 	movt	r3, #0
 3fc:	e50b300c 	str	r3, [r11, #-12]

	for(i=0; i<WM8731_NROF_REGS; i++){
 400:	e3a03000 	mov	r3, #0
 404:	e50b3008 	str	r3, [r11, #-8]
 408:	ea00000a 	b	438 <WriteRegSet+0x50>
		WriteReg(i, *pStructure);
 40c:	e51b300c 	ldr	r3, [r11, #-12]
 410:	e5933000 	ldr	r3, [r3]
 414:	e51b0008 	ldr	r0, [r11, #-8]
 418:	e1a01003 	mov	r1, r3
 41c:	ebffff8c 	bl	254 <WriteReg>
		pStructure++;
 420:	e51b300c 	ldr	r3, [r11, #-12]
 424:	e2833004 	add	r3, r3, #4
 428:	e50b300c 	str	r3, [r11, #-12]

int WriteRegSet(){
	int i;
	int * pStructure = &(wm8731.LLineIN);

	for(i=0; i<WM8731_NROF_REGS; i++){
 42c:	e51b3008 	ldr	r3, [r11, #-8]
 430:	e2833001 	add	r3, r3, #1
 434:	e50b3008 	str	r3, [r11, #-8]
 438:	e51b3008 	ldr	r3, [r11, #-8]
 43c:	e353000a 	cmp	r3, #10
 440:	dafffff1 	ble	40c <WriteRegSet+0x24>
		WriteReg(i, *pStructure);
		pStructure++;
	}

	return 0;
 444:	e3a03000 	mov	r3, #0
}
 448:	e1a00003 	mov	r0, r3
 44c:	e24bd004 	sub	sp, r11, #4
 450:	e8bd8800 	pop	{r11, pc}

00000454 <write_LW>:
volatile int *KEYS = (int *) 			0xFF200020;
volatile int *HEX0_2 = (int *) 			0xFF200040;
volatile int *HEX3_5 = (int *) 			0xFF200030;
volatile int *LEDS = (int *) 			0xFF200010;

int write_LW(unsigned int *data,int offset, int len){
 454:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 458:	e28db000 	add	r11, sp, #0
 45c:	e24dd01c 	sub	sp, sp, #28
 460:	e50b0010 	str	r0, [r11, #-16]
 464:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
 468:	e50b2018 	str	r2, [r11, #-24]	; 0xffffffe8
  volatile unsigned int *addr = (unsigned int *) (LW_BASE + offset);
 46c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
 470:	e243360e 	sub	r3, r3, #14680064	; 0xe00000
 474:	e50b300c 	str	r3, [r11, #-12]
  int i = 0;
 478:	e3a03000 	mov	r3, #0
 47c:	e50b3008 	str	r3, [r11, #-8]
    
  while(i < len){
 480:	ea000009 	b	4ac <write_LW+0x58>
    *addr = data[i];
 484:	e51b3008 	ldr	r3, [r11, #-8]
 488:	e1a03103 	lsl	r3, r3, #2
 48c:	e51b2010 	ldr	r2, [r11, #-16]
 490:	e0823003 	add	r3, r2, r3
 494:	e5932000 	ldr	r2, [r3]
 498:	e51b300c 	ldr	r3, [r11, #-12]
 49c:	e5832000 	str	r2, [r3]
    i++;
 4a0:	e51b3008 	ldr	r3, [r11, #-8]
 4a4:	e2833001 	add	r3, r3, #1
 4a8:	e50b3008 	str	r3, [r11, #-8]

int write_LW(unsigned int *data,int offset, int len){
  volatile unsigned int *addr = (unsigned int *) (LW_BASE + offset);
  int i = 0;
    
  while(i < len){
 4ac:	e51b2008 	ldr	r2, [r11, #-8]
 4b0:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 4b4:	e1520003 	cmp	r2, r3
 4b8:	bafffff1 	blt	484 <write_LW+0x30>
    *addr = data[i];
    i++;
  }
  return 0;
 4bc:	e3a03000 	mov	r3, #0
}
 4c0:	e1a00003 	mov	r0, r3
 4c4:	e24bd000 	sub	sp, r11, #0
 4c8:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 4cc:	e12fff1e 	bx	lr

000004d0 <main>:
// function prototypes
void __delay();
int toHex(int num);
void printHex(volatile int *hex_base, int number);

int main(void){
 4d0:	e92d4800 	push	{r11, lr}
 4d4:	e28db004 	add	r11, sp, #4
 4d8:	e24ddf92 	sub	sp, sp, #584	; 0x248
  unsigned int led_data = 0xAAA;
 4dc:	e3003aaa 	movw	r3, #2730	; 0xaaa
 4e0:	e50b300c 	str	r3, [r11, #-12]
  unsigned int fir_left[128];
  unsigned int i;
  unsigned int mul[2] = {0x8FFFFF, 0x8FFFFF};
 4e4:	e3003fcc 	movw	r3, #4044	; 0xfcc
 4e8:	e3403000 	movt	r3, #0
 4ec:	e24b2f85 	sub	r2, r11, #532	; 0x214
 4f0:	e8930003 	ldm	r3, {r0, r1}
 4f4:	e8820003 	stm	r2, {r0, r1}
  unsigned int delay=10;
 4f8:	e3a0300a 	mov	r3, #10
 4fc:	e50b3218 	str	r3, [r11, #-536]	; 0xfffffde8
  unsigned int white_noise_enable = 0;
 500:	e3a03000 	mov	r3, #0
 504:	e50b321c 	str	r3, [r11, #-540]	; 0xfffffde4
  unsigned int seven_seg1 = 0x39 | (0x5C<<7) | (0x6D<<14);
 508:	e3063e39 	movw	r3, #28217	; 0x6e39
 50c:	e340301b 	movt	r3, #27
 510:	e50b3220 	str	r3, [r11, #-544]	; 0xfffffde0
  unsigned int seven_seg2 = (0x73) | (0x6D<<7) | (0x77<<14);  
 514:	e30f36f3 	movw	r3, #63219	; 0xf6f3
 518:	e340301d 	movt	r3, #29
 51c:	e50b3224 	str	r3, [r11, #-548]	; 0xfffffddc

  unsigned int text_led[10] = {0x77,0x6D,0x73,0x40,0x6D,0x5C,0x39,0x00,0x00,0x00};
 520:	e3003fd4 	movw	r3, #4052	; 0xfd4
 524:	e3403000 	movt	r3, #0
 528:	e24bcf93 	sub	r12, r11, #588	; 0x24c
 52c:	e1a0e003 	mov	lr, r3
 530:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
 534:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
 538:	e8be000f 	ldm	lr!, {r0, r1, r2, r3}
 53c:	e8ac000f 	stmia	r12!, {r0, r1, r2, r3}
 540:	e89e0003 	ldm	lr, {r0, r1}
 544:	e88c0003 	stm	r12, {r0, r1}
  
  for(i=0;i<128;i++){
 548:	e3a03000 	mov	r3, #0
 54c:	e50b3008 	str	r3, [r11, #-8]
 550:	ea00000b 	b	584 <main+0xb4>
    fir_left[i] = (unsigned int) (0);
 554:	e51b2008 	ldr	r2, [r11, #-8]
 558:	e30f3df8 	movw	r3, #65016	; 0xfdf8
 55c:	e34f3fff 	movt	r3, #65535	; 0xffff
 560:	e1a02102 	lsl	r2, r2, #2
 564:	e24b1004 	sub	r1, r11, #4
 568:	e0812002 	add	r2, r1, r2
 56c:	e0823003 	add	r3, r2, r3
 570:	e3a02000 	mov	r2, #0
 574:	e5832000 	str	r2, [r3]
  unsigned int seven_seg1 = 0x39 | (0x5C<<7) | (0x6D<<14);
  unsigned int seven_seg2 = (0x73) | (0x6D<<7) | (0x77<<14);  

  unsigned int text_led[10] = {0x77,0x6D,0x73,0x40,0x6D,0x5C,0x39,0x00,0x00,0x00};
  
  for(i=0;i<128;i++){
 578:	e51b3008 	ldr	r3, [r11, #-8]
 57c:	e2833001 	add	r3, r3, #1
 580:	e50b3008 	str	r3, [r11, #-8]
 584:	e51b3008 	ldr	r3, [r11, #-8]
 588:	e353007f 	cmp	r3, #127	; 0x7f
 58c:	9afffff0 	bls	554 <main+0x84>
    fir_left[i] = (unsigned int) (0);
  }
  
  //fir_left[0]=0x4FFFFF;

  write_LW(&seven_seg1,PIO_HEX0_2_BASE,1);
 590:	e24b3e22 	sub	r3, r11, #544	; 0x220
 594:	e1a00003 	mov	r0, r3
 598:	e3a01040 	mov	r1, #64	; 0x40
 59c:	e3a02001 	mov	r2, #1
 5a0:	ebffffab 	bl	454 <write_LW>
  write_LW(&seven_seg2,PIO_HEX3_5_BASE,1);
 5a4:	e24b3f89 	sub	r3, r11, #548	; 0x224
 5a8:	e1a00003 	mov	r0, r3
 5ac:	e3a01030 	mov	r1, #48	; 0x30
 5b0:	e3a02001 	mov	r2, #1
 5b4:	ebffffa6 	bl	454 <write_LW>
  

  write_LW(&white_noise_enable,ASP_WHITE_NOISE_RIGHT_BASE,1);
 5b8:	e24b3f87 	sub	r3, r11, #540	; 0x21c
 5bc:	e1a00003 	mov	r0, r3
 5c0:	e3a01064 	mov	r1, #100	; 0x64
 5c4:	e3a02001 	mov	r2, #1
 5c8:	ebffffa1 	bl	454 <write_LW>
  write_LW(&white_noise_enable,ASP_WHITE_NOISE_LEFT_BASE,1);
 5cc:	e24b3f87 	sub	r3, r11, #540	; 0x21c
 5d0:	e1a00003 	mov	r0, r3
 5d4:	e3a01080 	mov	r1, #128	; 0x80
 5d8:	e3a02001 	mov	r2, #1
 5dc:	ebffff9c 	bl	454 <write_LW>
  
  write_LW(&delay,ASP_DELAY_LEFT_BASE,1);
 5e0:	e24b3f86 	sub	r3, r11, #536	; 0x218
 5e4:	e1a00003 	mov	r0, r3
 5e8:	e3a0108c 	mov	r1, #140	; 0x8c
 5ec:	e3a02001 	mov	r2, #1
 5f0:	ebffff97 	bl	454 <write_LW>
  write_LW(&delay,ASP_DELAY_RIGHT_BASE,1);
 5f4:	e24b3f86 	sub	r3, r11, #536	; 0x218
 5f8:	e1a00003 	mov	r0, r3
 5fc:	e3a01088 	mov	r1, #136	; 0x88
 600:	e3a02001 	mov	r2, #1
 604:	ebffff92 	bl	454 <write_LW>
  write_LW(mul,ASP_MULT_OUT_BASE,2);
 608:	e24b3f85 	sub	r3, r11, #532	; 0x214
 60c:	e1a00003 	mov	r0, r3
 610:	e3a01068 	mov	r1, #104	; 0x68
 614:	e3a02002 	mov	r2, #2
 618:	ebffff8d 	bl	454 <write_LW>
  

  write_LW(fir_left,ASP_FIR_LEFT_BASE,1);
 61c:	e24b3f83 	sub	r3, r11, #524	; 0x20c
 620:	e1a00003 	mov	r0, r3
 624:	e3a01b01 	mov	r1, #1024	; 0x400
 628:	e3a02001 	mov	r2, #1
 62c:	ebffff88 	bl	454 <write_LW>
  write_LW(fir_left,ASP_FIR_RIGHT_BASE,1);
 630:	e24b3f83 	sub	r3, r11, #524	; 0x20c
 634:	e1a00003 	mov	r0, r3
 638:	e3a01c02 	mov	r1, #512	; 0x200
 63c:	e3a02001 	mov	r2, #1
 640:	ebffff83 	bl	454 <write_LW>
  
  
  while(1){ // infinite loop
    static int text_counter = 0;
    
    __delay();
 644:	eb000141 	bl	b50 <__delay>
    led_data=0xAAAA;
 648:	e30a3aaa 	movw	r3, #43690	; 0xaaaa
 64c:	e50b300c 	str	r3, [r11, #-12]
    write_LW(&led_data,PIO_LEDS_BASE,1);
 650:	e24b300c 	sub	r3, r11, #12
 654:	e1a00003 	mov	r0, r3
 658:	e3a01010 	mov	r1, #16
 65c:	e3a02001 	mov	r2, #1
 660:	ebffff7b 	bl	454 <write_LW>

    __delay();
 664:	eb000139 	bl	b50 <__delay>
    led_data=0x5555;
 668:	e3053555 	movw	r3, #21845	; 0x5555
 66c:	e50b300c 	str	r3, [r11, #-12]
    write_LW(&led_data,PIO_LEDS_BASE,1);
 670:	e24b300c 	sub	r3, r11, #12
 674:	e1a00003 	mov	r0, r3
 678:	e3a01010 	mov	r1, #16
 67c:	e3a02001 	mov	r2, #1
 680:	ebffff73 	bl	454 <write_LW>



    
    seven_seg2 = (text_led[text_counter] << 14) | (text_led[(text_counter+1)%10] << 7) | (text_led[(text_counter+2)%10]);
 684:	e3013504 	movw	r3, #5380	; 0x1504
 688:	e3403000 	movt	r3, #0
 68c:	e5932000 	ldr	r2, [r3]
 690:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 694:	e34f3fff 	movt	r3, #65535	; 0xffff
 698:	e1a02102 	lsl	r2, r2, #2
 69c:	e24b1004 	sub	r1, r11, #4
 6a0:	e0812002 	add	r2, r1, r2
 6a4:	e0823003 	add	r3, r2, r3
 6a8:	e5933000 	ldr	r3, [r3]
 6ac:	e1a00703 	lsl	r0, r3, #14
 6b0:	e3013504 	movw	r3, #5380	; 0x1504
 6b4:	e3403000 	movt	r3, #0
 6b8:	e5933000 	ldr	r3, [r3]
 6bc:	e2831001 	add	r1, r3, #1
 6c0:	e3063667 	movw	r3, #26215	; 0x6667
 6c4:	e3463666 	movt	r3, #26214	; 0x6666
 6c8:	e0c32193 	smull	r2, r3, r3, r1
 6cc:	e1a02143 	asr	r2, r3, #2
 6d0:	e1a03fc1 	asr	r3, r1, #31
 6d4:	e0632002 	rsb	r2, r3, r2
 6d8:	e1a03002 	mov	r3, r2
 6dc:	e1a03103 	lsl	r3, r3, #2
 6e0:	e0833002 	add	r3, r3, r2
 6e4:	e1a03083 	lsl	r3, r3, #1
 6e8:	e0632001 	rsb	r2, r3, r1
 6ec:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 6f0:	e34f3fff 	movt	r3, #65535	; 0xffff
 6f4:	e1a02102 	lsl	r2, r2, #2
 6f8:	e24b1004 	sub	r1, r11, #4
 6fc:	e0812002 	add	r2, r1, r2
 700:	e0823003 	add	r3, r2, r3
 704:	e5933000 	ldr	r3, [r3]
 708:	e1a03383 	lsl	r3, r3, #7
 70c:	e1800003 	orr	r0, r0, r3
 710:	e3013504 	movw	r3, #5380	; 0x1504
 714:	e3403000 	movt	r3, #0
 718:	e5933000 	ldr	r3, [r3]
 71c:	e2831002 	add	r1, r3, #2
 720:	e3063667 	movw	r3, #26215	; 0x6667
 724:	e3463666 	movt	r3, #26214	; 0x6666
 728:	e0c32193 	smull	r2, r3, r3, r1
 72c:	e1a02143 	asr	r2, r3, #2
 730:	e1a03fc1 	asr	r3, r1, #31
 734:	e0632002 	rsb	r2, r3, r2
 738:	e1a03002 	mov	r3, r2
 73c:	e1a03103 	lsl	r3, r3, #2
 740:	e0833002 	add	r3, r3, r2
 744:	e1a03083 	lsl	r3, r3, #1
 748:	e0632001 	rsb	r2, r3, r1
 74c:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 750:	e34f3fff 	movt	r3, #65535	; 0xffff
 754:	e1a02102 	lsl	r2, r2, #2
 758:	e24b1004 	sub	r1, r11, #4
 75c:	e0812002 	add	r2, r1, r2
 760:	e0823003 	add	r3, r2, r3
 764:	e5933000 	ldr	r3, [r3]
 768:	e1803003 	orr	r3, r0, r3
 76c:	e50b3224 	str	r3, [r11, #-548]	; 0xfffffddc
    seven_seg1 = (text_led[(text_counter+3)%10] << 14) | (text_led[(text_counter+4)%10] << 7) | (text_led[(text_counter+5)%10]);
 770:	e3013504 	movw	r3, #5380	; 0x1504
 774:	e3403000 	movt	r3, #0
 778:	e5933000 	ldr	r3, [r3]
 77c:	e2831003 	add	r1, r3, #3
 780:	e3063667 	movw	r3, #26215	; 0x6667
 784:	e3463666 	movt	r3, #26214	; 0x6666
 788:	e0c32193 	smull	r2, r3, r3, r1
 78c:	e1a02143 	asr	r2, r3, #2
 790:	e1a03fc1 	asr	r3, r1, #31
 794:	e0632002 	rsb	r2, r3, r2
 798:	e1a03002 	mov	r3, r2
 79c:	e1a03103 	lsl	r3, r3, #2
 7a0:	e0833002 	add	r3, r3, r2
 7a4:	e1a03083 	lsl	r3, r3, #1
 7a8:	e0632001 	rsb	r2, r3, r1
 7ac:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 7b0:	e34f3fff 	movt	r3, #65535	; 0xffff
 7b4:	e1a02102 	lsl	r2, r2, #2
 7b8:	e24b1004 	sub	r1, r11, #4
 7bc:	e0812002 	add	r2, r1, r2
 7c0:	e0823003 	add	r3, r2, r3
 7c4:	e5933000 	ldr	r3, [r3]
 7c8:	e1a00703 	lsl	r0, r3, #14
 7cc:	e3013504 	movw	r3, #5380	; 0x1504
 7d0:	e3403000 	movt	r3, #0
 7d4:	e5933000 	ldr	r3, [r3]
 7d8:	e2831004 	add	r1, r3, #4
 7dc:	e3063667 	movw	r3, #26215	; 0x6667
 7e0:	e3463666 	movt	r3, #26214	; 0x6666
 7e4:	e0c32193 	smull	r2, r3, r3, r1
 7e8:	e1a02143 	asr	r2, r3, #2
 7ec:	e1a03fc1 	asr	r3, r1, #31
 7f0:	e0632002 	rsb	r2, r3, r2
 7f4:	e1a03002 	mov	r3, r2
 7f8:	e1a03103 	lsl	r3, r3, #2
 7fc:	e0833002 	add	r3, r3, r2
 800:	e1a03083 	lsl	r3, r3, #1
 804:	e0632001 	rsb	r2, r3, r1
 808:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 80c:	e34f3fff 	movt	r3, #65535	; 0xffff
 810:	e1a02102 	lsl	r2, r2, #2
 814:	e24b1004 	sub	r1, r11, #4
 818:	e0812002 	add	r2, r1, r2
 81c:	e0823003 	add	r3, r2, r3
 820:	e5933000 	ldr	r3, [r3]
 824:	e1a03383 	lsl	r3, r3, #7
 828:	e1800003 	orr	r0, r0, r3
 82c:	e3013504 	movw	r3, #5380	; 0x1504
 830:	e3403000 	movt	r3, #0
 834:	e5933000 	ldr	r3, [r3]
 838:	e2831005 	add	r1, r3, #5
 83c:	e3063667 	movw	r3, #26215	; 0x6667
 840:	e3463666 	movt	r3, #26214	; 0x6666
 844:	e0c32193 	smull	r2, r3, r3, r1
 848:	e1a02143 	asr	r2, r3, #2
 84c:	e1a03fc1 	asr	r3, r1, #31
 850:	e0632002 	rsb	r2, r3, r2
 854:	e1a03002 	mov	r3, r2
 858:	e1a03103 	lsl	r3, r3, #2
 85c:	e0833002 	add	r3, r3, r2
 860:	e1a03083 	lsl	r3, r3, #1
 864:	e0632001 	rsb	r2, r3, r1
 868:	e30f3db8 	movw	r3, #64952	; 0xfdb8
 86c:	e34f3fff 	movt	r3, #65535	; 0xffff
 870:	e1a02102 	lsl	r2, r2, #2
 874:	e24b1004 	sub	r1, r11, #4
 878:	e0812002 	add	r2, r1, r2
 87c:	e0823003 	add	r3, r2, r3
 880:	e5933000 	ldr	r3, [r3]
 884:	e1803003 	orr	r3, r0, r3
 888:	e50b3220 	str	r3, [r11, #-544]	; 0xfffffde0

    write_LW(&seven_seg1,PIO_HEX0_2_BASE,1);
 88c:	e24b3e22 	sub	r3, r11, #544	; 0x220
 890:	e1a00003 	mov	r0, r3
 894:	e3a01040 	mov	r1, #64	; 0x40
 898:	e3a02001 	mov	r2, #1
 89c:	ebfffeec 	bl	454 <write_LW>
    write_LW(&seven_seg2,PIO_HEX3_5_BASE,1);
 8a0:	e24b3f89 	sub	r3, r11, #548	; 0x224
 8a4:	e1a00003 	mov	r0, r3
 8a8:	e3a01030 	mov	r1, #48	; 0x30
 8ac:	e3a02001 	mov	r2, #1
 8b0:	ebfffee7 	bl	454 <write_LW>
    
    
    if(text_counter == 9){
 8b4:	e3013504 	movw	r3, #5380	; 0x1504
 8b8:	e3403000 	movt	r3, #0
 8bc:	e5933000 	ldr	r3, [r3]
 8c0:	e3530009 	cmp	r3, #9
 8c4:	1a000004 	bne	8dc <main+0x40c>
      text_counter = 0;
 8c8:	e3013504 	movw	r3, #5380	; 0x1504
 8cc:	e3403000 	movt	r3, #0
 8d0:	e3a02000 	mov	r2, #0
 8d4:	e5832000 	str	r2, [r3]
    }else{
      text_counter++;
    }
    
  }
 8d8:	eaffff59 	b	644 <main+0x174>
    
    
    if(text_counter == 9){
      text_counter = 0;
    }else{
      text_counter++;
 8dc:	e3013504 	movw	r3, #5380	; 0x1504
 8e0:	e3403000 	movt	r3, #0
 8e4:	e5933000 	ldr	r3, [r3]
 8e8:	e2832001 	add	r2, r3, #1
 8ec:	e3013504 	movw	r3, #5380	; 0x1504
 8f0:	e3403000 	movt	r3, #0
 8f4:	e5832000 	str	r2, [r3]
    }
    
  }
 8f8:	eaffff51 	b	644 <main+0x174>

000008fc <printHex>:
  
  return 0;
}

// print number between 0 and 999 to 7 segment display
void printHex(volatile int *hex_base, int number){
 8fc:	e92d4810 	push	{r4, r11, lr}
 900:	e28db008 	add	r11, sp, #8
 904:	e24dd00c 	sub	sp, sp, #12
 908:	e50b0010 	str	r0, [r11, #-16]
 90c:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	
	*hex_base = 0; // turn all segments off
 910:	e51b3010 	ldr	r3, [r11, #-16]
 914:	e3a02000 	mov	r2, #0
 918:	e5832000 	str	r2, [r3]
	*hex_base |= toHex(number % 10);
 91c:	e51b3010 	ldr	r3, [r11, #-16]
 920:	e5934000 	ldr	r4, [r3]
 924:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
 928:	e3063667 	movw	r3, #26215	; 0x6667
 92c:	e3463666 	movt	r3, #26214	; 0x6666
 930:	e0c32193 	smull	r2, r3, r3, r1
 934:	e1a02143 	asr	r2, r3, #2
 938:	e1a03fc1 	asr	r3, r1, #31
 93c:	e0632002 	rsb	r2, r3, r2
 940:	e1a03002 	mov	r3, r2
 944:	e1a03103 	lsl	r3, r3, #2
 948:	e0833002 	add	r3, r3, r2
 94c:	e1a03083 	lsl	r3, r3, #1
 950:	e0632001 	rsb	r2, r3, r1
 954:	e1a00002 	mov	r0, r2
 958:	eb00003f 	bl	a5c <toHex>
 95c:	e1a03000 	mov	r3, r0
 960:	e1842003 	orr	r2, r4, r3
 964:	e51b3010 	ldr	r3, [r11, #-16]
 968:	e5832000 	str	r2, [r3]
	number = number / 10;
 96c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 970:	e3063667 	movw	r3, #26215	; 0x6667
 974:	e3463666 	movt	r3, #26214	; 0x6666
 978:	e0c31293 	smull	r1, r3, r3, r2
 97c:	e1a01143 	asr	r1, r3, #2
 980:	e1a03fc2 	asr	r3, r2, #31
 984:	e0633001 	rsb	r3, r3, r1
 988:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*hex_base |= (toHex(number % 10) << 7);
 98c:	e51b3010 	ldr	r3, [r11, #-16]
 990:	e5934000 	ldr	r4, [r3]
 994:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
 998:	e3063667 	movw	r3, #26215	; 0x6667
 99c:	e3463666 	movt	r3, #26214	; 0x6666
 9a0:	e0c32193 	smull	r2, r3, r3, r1
 9a4:	e1a02143 	asr	r2, r3, #2
 9a8:	e1a03fc1 	asr	r3, r1, #31
 9ac:	e0632002 	rsb	r2, r3, r2
 9b0:	e1a03002 	mov	r3, r2
 9b4:	e1a03103 	lsl	r3, r3, #2
 9b8:	e0833002 	add	r3, r3, r2
 9bc:	e1a03083 	lsl	r3, r3, #1
 9c0:	e0632001 	rsb	r2, r3, r1
 9c4:	e1a00002 	mov	r0, r2
 9c8:	eb000023 	bl	a5c <toHex>
 9cc:	e1a03000 	mov	r3, r0
 9d0:	e1a03383 	lsl	r3, r3, #7
 9d4:	e1842003 	orr	r2, r4, r3
 9d8:	e51b3010 	ldr	r3, [r11, #-16]
 9dc:	e5832000 	str	r2, [r3]
	number = number / 10;
 9e0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
 9e4:	e3063667 	movw	r3, #26215	; 0x6667
 9e8:	e3463666 	movt	r3, #26214	; 0x6666
 9ec:	e0c31293 	smull	r1, r3, r3, r2
 9f0:	e1a01143 	asr	r1, r3, #2
 9f4:	e1a03fc2 	asr	r3, r2, #31
 9f8:	e0633001 	rsb	r3, r3, r1
 9fc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*hex_base |= (toHex(number % 10) << 14);
 a00:	e51b3010 	ldr	r3, [r11, #-16]
 a04:	e5934000 	ldr	r4, [r3]
 a08:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
 a0c:	e3063667 	movw	r3, #26215	; 0x6667
 a10:	e3463666 	movt	r3, #26214	; 0x6666
 a14:	e0c32193 	smull	r2, r3, r3, r1
 a18:	e1a02143 	asr	r2, r3, #2
 a1c:	e1a03fc1 	asr	r3, r1, #31
 a20:	e0632002 	rsb	r2, r3, r2
 a24:	e1a03002 	mov	r3, r2
 a28:	e1a03103 	lsl	r3, r3, #2
 a2c:	e0833002 	add	r3, r3, r2
 a30:	e1a03083 	lsl	r3, r3, #1
 a34:	e0632001 	rsb	r2, r3, r1
 a38:	e1a00002 	mov	r0, r2
 a3c:	eb000006 	bl	a5c <toHex>
 a40:	e1a03000 	mov	r3, r0
 a44:	e1a03703 	lsl	r3, r3, #14
 a48:	e1842003 	orr	r2, r4, r3
 a4c:	e51b3010 	ldr	r3, [r11, #-16]
 a50:	e5832000 	str	r2, [r3]
}
 a54:	e24bd008 	sub	sp, r11, #8
 a58:	e8bd8810 	pop	{r4, r11, pc}

00000a5c <toHex>:

// convert integer 0-15 to hex
int toHex(int num){
 a5c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 a60:	e28db000 	add	r11, sp, #0
 a64:	e24dd00c 	sub	sp, sp, #12
 a68:	e50b0008 	str	r0, [r11, #-8]
	switch(num){
 a6c:	e51b3008 	ldr	r3, [r11, #-8]
 a70:	e353000f 	cmp	r3, #15
 a74:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
 a78:	ea00002f 	b	b3c <toHex+0xe0>
 a7c:	00000abc 	.word	0x00000abc
 a80:	00000ac4 	.word	0x00000ac4
 a84:	00000acc 	.word	0x00000acc
 a88:	00000ad4 	.word	0x00000ad4
 a8c:	00000adc 	.word	0x00000adc
 a90:	00000ae4 	.word	0x00000ae4
 a94:	00000aec 	.word	0x00000aec
 a98:	00000af4 	.word	0x00000af4
 a9c:	00000afc 	.word	0x00000afc
 aa0:	00000b04 	.word	0x00000b04
 aa4:	00000b0c 	.word	0x00000b0c
 aa8:	00000b14 	.word	0x00000b14
 aac:	00000b1c 	.word	0x00000b1c
 ab0:	00000b24 	.word	0x00000b24
 ab4:	00000b2c 	.word	0x00000b2c
 ab8:	00000b34 	.word	0x00000b34
		case 0: return 0b0111111; break;
 abc:	e3a0303f 	mov	r3, #63	; 0x3f
 ac0:	ea00001e 	b	b40 <toHex+0xe4>
		case 1: return 0b0000110; break;
 ac4:	e3a03006 	mov	r3, #6
 ac8:	ea00001c 	b	b40 <toHex+0xe4>
		case 2: return 0b1011011; break;
 acc:	e3a0305b 	mov	r3, #91	; 0x5b
 ad0:	ea00001a 	b	b40 <toHex+0xe4>
		case 3: return 0b1001111; break;
 ad4:	e3a0304f 	mov	r3, #79	; 0x4f
 ad8:	ea000018 	b	b40 <toHex+0xe4>
		case 4: return 0b1100110; break;
 adc:	e3a03066 	mov	r3, #102	; 0x66
 ae0:	ea000016 	b	b40 <toHex+0xe4>
		case 5: return 0b1101101; break;
 ae4:	e3a0306d 	mov	r3, #109	; 0x6d
 ae8:	ea000014 	b	b40 <toHex+0xe4>
		case 6: return 0b1111101; break;
 aec:	e3a0307d 	mov	r3, #125	; 0x7d
 af0:	ea000012 	b	b40 <toHex+0xe4>
		case 7: return 0b0000111; break;
 af4:	e3a03007 	mov	r3, #7
 af8:	ea000010 	b	b40 <toHex+0xe4>
		case 8: return 0b1111111; break;
 afc:	e3a0307f 	mov	r3, #127	; 0x7f
 b00:	ea00000e 	b	b40 <toHex+0xe4>
		case 9: return 0b1101111; break;
 b04:	e3a0306f 	mov	r3, #111	; 0x6f
 b08:	ea00000c 	b	b40 <toHex+0xe4>
		case 10: return 0b1110111; break;
 b0c:	e3a03077 	mov	r3, #119	; 0x77
 b10:	ea00000a 	b	b40 <toHex+0xe4>
		case 11: return 0b1111100; break;
 b14:	e3a0307c 	mov	r3, #124	; 0x7c
 b18:	ea000008 	b	b40 <toHex+0xe4>
		case 12: return 0b0111001; break;
 b1c:	e3a03039 	mov	r3, #57	; 0x39
 b20:	ea000006 	b	b40 <toHex+0xe4>
		case 13: return 0b1011110; break;
 b24:	e3a0305e 	mov	r3, #94	; 0x5e
 b28:	ea000004 	b	b40 <toHex+0xe4>
		case 14: return 0b1111001; break;
 b2c:	e3a03079 	mov	r3, #121	; 0x79
 b30:	ea000002 	b	b40 <toHex+0xe4>
		case 15: return 0b1110001; break;
 b34:	e3a03071 	mov	r3, #113	; 0x71
 b38:	ea000000 	b	b40 <toHex+0xe4>
		default: return 0;
 b3c:	e3a03000 	mov	r3, #0
	}
}
 b40:	e1a00003 	mov	r0, r3
 b44:	e24bd000 	sub	sp, r11, #0
 b48:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 b4c:	e12fff1e 	bx	lr

00000b50 <__delay>:


void __delay(){
 b50:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
 b54:	e28db000 	add	r11, sp, #0
 b58:	e24dd00c 	sub	sp, sp, #12
  int i;
  for(i=0;i<LOOP_DELAY;i++);
 b5c:	e3a03000 	mov	r3, #0
 b60:	e50b3008 	str	r3, [r11, #-8]
 b64:	ea000002 	b	b74 <__delay+0x24>
 b68:	e51b3008 	ldr	r3, [r11, #-8]
 b6c:	e2833001 	add	r3, r3, #1
 b70:	e50b3008 	str	r3, [r11, #-8]
 b74:	e51b2008 	ldr	r2, [r11, #-8]
 b78:	e304323f 	movw	r3, #16959	; 0x423f
 b7c:	e340300f 	movt	r3, #15
 b80:	e1520003 	cmp	r2, r3
 b84:	dafffff7 	ble	b68 <__delay+0x18>
}
 b88:	e24bd000 	sub	sp, r11, #0
 b8c:	e49db004 	pop	{r11}		; (ldr r11, [sp], #4)
 b90:	e12fff1e 	bx	lr

00000b94 <atexit>:
 b94:	e92d4008 	push	{r3, lr}
 b98:	e1a01000 	mov	r1, r0
 b9c:	e3a00000 	mov	r0, #0
 ba0:	e1a03000 	mov	r3, r0
 ba4:	e1a02000 	mov	r2, r0
 ba8:	eb00000e 	bl	be8 <__register_exitproc>
 bac:	e8bd4008 	pop	{r3, lr}
 bb0:	e12fff1e 	bx	lr

00000bb4 <exit>:
 bb4:	e92d4008 	push	{r3, lr}
 bb8:	e3a01000 	mov	r1, #0
 bbc:	e1a04000 	mov	r4, r0
 bc0:	eb000044 	bl	cd8 <__call_exitprocs>
 bc4:	e59f3018 	ldr	r3, [pc, #24]	; be4 <exit+0x30>
 bc8:	e5930000 	ldr	r0, [r3]
 bcc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 bd0:	e3530000 	cmp	r3, #0
 bd4:	11a0e00f 	movne	lr, pc
 bd8:	112fff13 	bxne	r3
 bdc:	e1a00004 	mov	r0, r4
 be0:	eb0000c6 	bl	f00 <_exit>
 be4:	00000ffc 	.word	0x00000ffc

00000be8 <__register_exitproc>:
 be8:	e59fc0e0 	ldr	r12, [pc, #224]	; cd0 <__register_exitproc+0xe8>
 bec:	e92d4070 	push	{r4, r5, r6, lr}
 bf0:	e59c5000 	ldr	r5, [r12]
 bf4:	e595c148 	ldr	r12, [r5, #328]	; 0x148
 bf8:	e35c0000 	cmp	r12, #0
 bfc:	0285cf53 	addeq	r12, r5, #332	; 0x14c
 c00:	e59c4004 	ldr	r4, [r12, #4]
 c04:	0585c148 	streq	r12, [r5, #328]	; 0x148
 c08:	e354001f 	cmp	r4, #31
 c0c:	e24dd010 	sub	sp, sp, #16
 c10:	e1a06000 	mov	r6, r0
 c14:	da000016 	ble	c74 <__register_exitproc+0x8c>
 c18:	e59f00b4 	ldr	r0, [pc, #180]	; cd4 <__register_exitproc+0xec>
 c1c:	e3500000 	cmp	r0, #0
 c20:	1a000003 	bne	c34 <__register_exitproc+0x4c>
 c24:	e3e00000 	mvn	r0, #0
 c28:	e28dd010 	add	sp, sp, #16
 c2c:	e8bd4070 	pop	{r4, r5, r6, lr}
 c30:	e12fff1e 	bx	lr
 c34:	e3a00e19 	mov	r0, #400	; 0x190
 c38:	e58d100c 	str	r1, [sp, #12]
 c3c:	e58d2008 	str	r2, [sp, #8]
 c40:	e58d3004 	str	r3, [sp, #4]
 c44:	e320f000 	nop	{0}
 c48:	e250c000 	subs	r12, r0, #0
 c4c:	e59d100c 	ldr	r1, [sp, #12]
 c50:	e59d2008 	ldr	r2, [sp, #8]
 c54:	e59d3004 	ldr	r3, [sp, #4]
 c58:	0afffff1 	beq	c24 <__register_exitproc+0x3c>
 c5c:	e5950148 	ldr	r0, [r5, #328]	; 0x148
 c60:	e3a04000 	mov	r4, #0
 c64:	e88c0011 	stm	r12, {r0, r4}
 c68:	e585c148 	str	r12, [r5, #328]	; 0x148
 c6c:	e58c4188 	str	r4, [r12, #392]	; 0x188
 c70:	e58c418c 	str	r4, [r12, #396]	; 0x18c
 c74:	e3560000 	cmp	r6, #0
 c78:	1a000007 	bne	c9c <__register_exitproc+0xb4>
 c7c:	e2843001 	add	r3, r4, #1
 c80:	e3a00000 	mov	r0, #0
 c84:	e2844002 	add	r4, r4, #2
 c88:	e58c3004 	str	r3, [r12, #4]
 c8c:	e78c1104 	str	r1, [r12, r4, lsl #2]
 c90:	e28dd010 	add	sp, sp, #16
 c94:	e8bd4070 	pop	{r4, r5, r6, lr}
 c98:	e12fff1e 	bx	lr
 c9c:	e3a05001 	mov	r5, #1
 ca0:	e1a05415 	lsl	r5, r5, r4
 ca4:	e08c0104 	add	r0, r12, r4, lsl #2
 ca8:	e5802088 	str	r2, [r0, #136]	; 0x88
 cac:	e59c2188 	ldr	r2, [r12, #392]	; 0x188
 cb0:	e1822005 	orr	r2, r2, r5
 cb4:	e58c2188 	str	r2, [r12, #392]	; 0x188
 cb8:	e5803108 	str	r3, [r0, #264]	; 0x108
 cbc:	e3560002 	cmp	r6, #2
 cc0:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 cc4:	01835005 	orreq	r5, r3, r5
 cc8:	058c518c 	streq	r5, [r12, #396]	; 0x18c
 ccc:	eaffffea 	b	c7c <__register_exitproc+0x94>
 cd0:	00000ffc 	.word	0x00000ffc
 cd4:	00000000 	.word	0x00000000

00000cd8 <__call_exitprocs>:
 cd8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 cdc:	e59f315c 	ldr	r3, [pc, #348]	; e40 <__call_exitprocs+0x168>
 ce0:	e5933000 	ldr	r3, [r3]
 ce4:	e24dd014 	sub	sp, sp, #20
 ce8:	e2832f52 	add	r2, r3, #328	; 0x148
 cec:	e58d3004 	str	r3, [sp, #4]
 cf0:	e58d0008 	str	r0, [sp, #8]
 cf4:	e58d200c 	str	r2, [sp, #12]
 cf8:	e1a07001 	mov	r7, r1
 cfc:	e3a09001 	mov	r9, #1
 d00:	e59d3004 	ldr	r3, [sp, #4]
 d04:	e5938148 	ldr	r8, [r3, #328]	; 0x148
 d08:	e3580000 	cmp	r8, #0
 d0c:	0a000038 	beq	df4 <__call_exitprocs+0x11c>
 d10:	e59db00c 	ldr	r11, [sp, #12]
 d14:	e5986004 	ldr	r6, [r8, #4]
 d18:	e2564001 	subs	r4, r6, #1
 d1c:	50885106 	addpl	r5, r8, r6, lsl #2
 d20:	52866002 	addpl	r6, r6, #2
 d24:	52855f42 	addpl	r5, r5, #264	; 0x108
 d28:	50886106 	addpl	r6, r8, r6, lsl #2
 d2c:	5a000008 	bpl	d54 <__call_exitprocs+0x7c>
 d30:	ea00002c 	b	de8 <__call_exitprocs+0x110>
 d34:	e5153004 	ldr	r3, [r5, #-4]
 d38:	e1530007 	cmp	r3, r7
 d3c:	0a000006 	beq	d5c <__call_exitprocs+0x84>
 d40:	e2444001 	sub	r4, r4, #1
 d44:	e3740001 	cmn	r4, #1
 d48:	e2455004 	sub	r5, r5, #4
 d4c:	e2466004 	sub	r6, r6, #4
 d50:	0a000024 	beq	de8 <__call_exitprocs+0x110>
 d54:	e3570000 	cmp	r7, #0
 d58:	1afffff5 	bne	d34 <__call_exitprocs+0x5c>
 d5c:	e5983004 	ldr	r3, [r8, #4]
 d60:	e2433001 	sub	r3, r3, #1
 d64:	e1530004 	cmp	r3, r4
 d68:	e5163004 	ldr	r3, [r6, #-4]
 d6c:	13a02000 	movne	r2, #0
 d70:	05884004 	streq	r4, [r8, #4]
 d74:	15062004 	strne	r2, [r6, #-4]
 d78:	e3530000 	cmp	r3, #0
 d7c:	0affffef 	beq	d40 <__call_exitprocs+0x68>
 d80:	e1a02419 	lsl	r2, r9, r4
 d84:	e5981188 	ldr	r1, [r8, #392]	; 0x188
 d88:	e1120001 	tst	r2, r1
 d8c:	e598a004 	ldr	r10, [r8, #4]
 d90:	0a00000d 	beq	dcc <__call_exitprocs+0xf4>
 d94:	e598118c 	ldr	r1, [r8, #396]	; 0x18c
 d98:	e1120001 	tst	r2, r1
 d9c:	1a00000d 	bne	dd8 <__call_exitprocs+0x100>
 da0:	e59d0008 	ldr	r0, [sp, #8]
 da4:	e5151084 	ldr	r1, [r5, #-132]	; 0xffffff7c
 da8:	e1a0e00f 	mov	lr, pc
 dac:	e12fff13 	bx	r3
 db0:	e5983004 	ldr	r3, [r8, #4]
 db4:	e153000a 	cmp	r3, r10
 db8:	1affffd0 	bne	d00 <__call_exitprocs+0x28>
 dbc:	e59b3000 	ldr	r3, [r11]
 dc0:	e1530008 	cmp	r3, r8
 dc4:	0affffdd 	beq	d40 <__call_exitprocs+0x68>
 dc8:	eaffffcc 	b	d00 <__call_exitprocs+0x28>
 dcc:	e1a0e00f 	mov	lr, pc
 dd0:	e12fff13 	bx	r3
 dd4:	eafffff5 	b	db0 <__call_exitprocs+0xd8>
 dd8:	e5150084 	ldr	r0, [r5, #-132]	; 0xffffff7c
 ddc:	e1a0e00f 	mov	lr, pc
 de0:	e12fff13 	bx	r3
 de4:	eafffff1 	b	db0 <__call_exitprocs+0xd8>
 de8:	e59f2054 	ldr	r2, [pc, #84]	; e44 <__call_exitprocs+0x16c>
 dec:	e3520000 	cmp	r2, #0
 df0:	1a000002 	bne	e00 <__call_exitprocs+0x128>
 df4:	e28dd014 	add	sp, sp, #20
 df8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 dfc:	e12fff1e 	bx	lr
 e00:	e5983004 	ldr	r3, [r8, #4]
 e04:	e3530000 	cmp	r3, #0
 e08:	e5983000 	ldr	r3, [r8]
 e0c:	1a000008 	bne	e34 <__call_exitprocs+0x15c>
 e10:	e3530000 	cmp	r3, #0
 e14:	0a000006 	beq	e34 <__call_exitprocs+0x15c>
 e18:	e1a00008 	mov	r0, r8
 e1c:	e58b3000 	str	r3, [r11]
 e20:	e320f000 	nop	{0}
 e24:	e59b8000 	ldr	r8, [r11]
 e28:	e3580000 	cmp	r8, #0
 e2c:	1affffb8 	bne	d14 <__call_exitprocs+0x3c>
 e30:	eaffffef 	b	df4 <__call_exitprocs+0x11c>
 e34:	e1a0b008 	mov	r11, r8
 e38:	e1a08003 	mov	r8, r3
 e3c:	eafffff9 	b	e28 <__call_exitprocs+0x150>
 e40:	00000ffc 	.word	0x00000ffc
 e44:	00000000 	.word	0x00000000

00000e48 <register_fini>:
 e48:	e92d4008 	push	{r3, lr}
 e4c:	e59f3010 	ldr	r3, [pc, #16]	; e64 <register_fini+0x1c>
 e50:	e3530000 	cmp	r3, #0
 e54:	159f000c 	ldrne	r0, [pc, #12]	; e68 <register_fini+0x20>
 e58:	1bffff4d 	blne	b94 <atexit>
 e5c:	e8bd4008 	pop	{r3, lr}
 e60:	e12fff1e 	bx	lr
 e64:	00001024 	.word	0x00001024
 e68:	00000e6c 	.word	0x00000e6c

00000e6c <__libc_fini_array>:
 e6c:	e92d4038 	push	{r3, r4, r5, lr}
 e70:	e59f5034 	ldr	r5, [pc, #52]	; eac <__libc_fini_array+0x40>
 e74:	e59f4034 	ldr	r4, [pc, #52]	; eb0 <__libc_fini_array+0x44>
 e78:	e0654004 	rsb	r4, r5, r4
 e7c:	e1b04144 	asrs	r4, r4, #2
 e80:	10855104 	addne	r5, r5, r4, lsl #2
 e84:	0a000005 	beq	ea0 <__libc_fini_array+0x34>
 e88:	e2444001 	sub	r4, r4, #1
 e8c:	e5353004 	ldr	r3, [r5, #-4]!
 e90:	e1a0e00f 	mov	lr, pc
 e94:	e12fff13 	bx	r3
 e98:	e3540000 	cmp	r4, #0
 e9c:	1afffff9 	bne	e88 <__libc_fini_array+0x1c>
 ea0:	eb00005f 	bl	1024 <__libc_fini>
 ea4:	e8bd4038 	pop	{r3, r4, r5, lr}
 ea8:	e12fff1e 	bx	lr
 eac:	0000103c 	.word	0x0000103c
 eb0:	00001040 	.word	0x00001040

00000eb4 <__cs3_premain>:
 eb4:	e92d4008 	push	{r3, lr}
 eb8:	eb00001d 	bl	f34 <__libc_init_array>
 ebc:	e59f3030 	ldr	r3, [pc, #48]	; ef4 <__cs3_premain+0x40>
 ec0:	e3530000 	cmp	r3, #0
 ec4:	15930000 	ldrne	r0, [r3]
 ec8:	01a00003 	moveq	r0, r3
 ecc:	e59f3024 	ldr	r3, [pc, #36]	; ef8 <__cs3_premain+0x44>
 ed0:	e3530000 	cmp	r3, #0
 ed4:	15931000 	ldrne	r1, [r3]
 ed8:	01a01003 	moveq	r1, r3
 edc:	e3a02000 	mov	r2, #0
 ee0:	ebfffd7a 	bl	4d0 <main>
 ee4:	e59f3010 	ldr	r3, [pc, #16]	; efc <__cs3_premain+0x48>
 ee8:	e3530000 	cmp	r3, #0
 eec:	1bffff30 	blne	bb4 <exit>
 ef0:	eafffffe 	b	ef0 <__cs3_premain+0x3c>
	...
 efc:	00000bb4 	.word	0x00000bb4

00000f00 <_exit>:
 f00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 f04:	e3a00018 	mov	r0, #24
 f08:	e59f1004 	ldr	r1, [pc, #4]	; f14 <_exit+0x14>
 f0c:	ef123456 	svc	0x00123456
 f10:	eafffffe 	b	f10 <_exit+0x10>
 f14:	00020026 	.word	0x00020026

00000f18 <__cs3_isr_interrupt>:
 f18:	eafffffe 	b	f18 <__cs3_isr_interrupt>

00000f1c <__cs3_isr_undef>:
 f1c:	eafffffe 	b	f1c <__cs3_isr_undef>

00000f20 <__cs3_isr_swi>:
 f20:	eafffffe 	b	f20 <__cs3_isr_swi>

00000f24 <__cs3_isr_pabort>:
 f24:	eafffffe 	b	f24 <__cs3_isr_pabort>

00000f28 <__cs3_isr_dabort>:
 f28:	eafffffe 	b	f28 <__cs3_isr_dabort>

00000f2c <__cs3_isr_irq>:
 f2c:	eafffffe 	b	f2c <__cs3_isr_irq>

00000f30 <__cs3_isr_fiq>:
 f30:	eafffffe 	b	f30 <__cs3_isr_fiq>

00000f34 <__libc_init_array>:
 f34:	e92d4070 	push	{r4, r5, r6, lr}
 f38:	e59f506c 	ldr	r5, [pc, #108]	; fac <__libc_init_array+0x78>
 f3c:	e59f606c 	ldr	r6, [pc, #108]	; fb0 <__libc_init_array+0x7c>
 f40:	e0656006 	rsb	r6, r5, r6
 f44:	e1b06146 	asrs	r6, r6, #2
 f48:	12455004 	subne	r5, r5, #4
 f4c:	13a04000 	movne	r4, #0
 f50:	0a000005 	beq	f6c <__libc_init_array+0x38>
 f54:	e2844001 	add	r4, r4, #1
 f58:	e5b53004 	ldr	r3, [r5, #4]!
 f5c:	e1a0e00f 	mov	lr, pc
 f60:	e12fff13 	bx	r3
 f64:	e1560004 	cmp	r6, r4
 f68:	1afffff9 	bne	f54 <__libc_init_array+0x20>
 f6c:	e59f5040 	ldr	r5, [pc, #64]	; fb4 <__libc_init_array+0x80>
 f70:	e59f6040 	ldr	r6, [pc, #64]	; fb8 <__libc_init_array+0x84>
 f74:	e0656006 	rsb	r6, r5, r6
 f78:	eb000021 	bl	1004 <_init>
 f7c:	e1b06146 	asrs	r6, r6, #2
 f80:	12455004 	subne	r5, r5, #4
 f84:	13a04000 	movne	r4, #0
 f88:	0a000005 	beq	fa4 <__libc_init_array+0x70>
 f8c:	e2844001 	add	r4, r4, #1
 f90:	e5b53004 	ldr	r3, [r5, #4]!
 f94:	e1a0e00f 	mov	lr, pc
 f98:	e12fff13 	bx	r3
 f9c:	e1560004 	cmp	r6, r4
 fa0:	1afffff9 	bne	f8c <__libc_init_array+0x58>
 fa4:	e8bd4070 	pop	{r4, r5, r6, lr}
 fa8:	e12fff1e 	bx	lr
 fac:	0000101c 	.word	0x0000101c
 fb0:	0000101c 	.word	0x0000101c
 fb4:	0000101c 	.word	0x0000101c
 fb8:	00001024 	.word	0x00001024

Disassembly of section .rodata:

00000fc0 <WM8731IF_STATUS>:
     fc0:	ff200054                                T. .

00000fc4 <WM8731IF_ADDR>:
     fc4:	ff200058                                X. .

00000fc8 <WM8731IF_DATA>:
     fc8:	ff20005c 008fffff 008fffff 00000077     \. .........w...
     fd8:	0000006d 00000073 00000040 0000006d     m...s...@...m...
     fe8:	0000005c 00000039 00000000 00000000     \...9...........
     ff8:	00000000                                ....

00000ffc <_global_impure_ptr>:
     ffc:	000010b8 00000043                       ....C...

00001004 <_init>:
    1004:	e1a0c00d 	mov	r12, sp
    1008:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    100c:	e24cb004 	sub	r11, r12, #4
    1010:	e24bd028 	sub	sp, r11, #40	; 0x28
    1014:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1018:	e12fff1e 	bx	lr

0000101c <__init_array_start>:
    101c:	00000e48 	.word	0x00000e48

00001020 <__frame_dummy_init_array_entry>:
    1020:	00000200                                ....

00001024 <__libc_fini>:
    1024:	e1a0c00d 	mov	r12, sp
    1028:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    102c:	e24cb004 	sub	r11, r12, #4
    1030:	e24bd028 	sub	sp, r11, #40	; 0x28
    1034:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1038:	e12fff1e 	bx	lr

0000103c <__fini_array_start>:
    103c:	000001bc 	.word	0x000001bc

00001040 <__cs3_regions>:
	...
    104c:	000014e8 	.word	0x000014e8
    1050:	00000020 	.word	0x00000020

00001054 <__cs3_regions_end>:
    1054:	00000000 	.word	0x00000000
