#ifndef _ALTERA_ARM_A9_HPS_ARM_A9_0_H_
#define _ALTERA_ARM_A9_HPS_ARM_A9_0_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'Platform' in
 * file './header/Platform.swinfo'.
 */

/*
 * This file contains macros for module 'ARM_A9_HPS_arm_a9_0' and devices
 * connected to the following master:
 *   altera_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'ARM_A9_HPS_axi_sdram', class 'axi_sdram'
 * The macros are prefixed with 'ARM_A9_HPS_AXI_SDRAM_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_AXI_SDRAM_COMPONENT_TYPE axi_sdram
#define ARM_A9_HPS_AXI_SDRAM_COMPONENT_NAME ARM_A9_HPS_axi_sdram
#define ARM_A9_HPS_AXI_SDRAM_BASE 0x0
#define ARM_A9_HPS_AXI_SDRAM_SPAN 0x80000000
#define ARM_A9_HPS_AXI_SDRAM_END 0x7fffffff
#define ARM_A9_HPS_AXI_SDRAM_SIZE_MULTIPLE 1
#define ARM_A9_HPS_AXI_SDRAM_SIZE_VALUE 1<<31
#define ARM_A9_HPS_AXI_SDRAM_WRITABLE 1
#define ARM_A9_HPS_AXI_SDRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define ARM_A9_HPS_AXI_SDRAM_MEMORY_INFO_GENERATE_HEX 0
#define ARM_A9_HPS_AXI_SDRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 31

/*
 * Macros for device 'pio_switches', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_SWITCHES_'.
 * The prefix is the slave descriptor.
 */
#define PIO_SWITCHES_COMPONENT_TYPE altera_avalon_pio
#define PIO_SWITCHES_COMPONENT_NAME pio_switches
#define PIO_SWITCHES_BASE 0xff200000
#define PIO_SWITCHES_SPAN 16
#define PIO_SWITCHES_END 0xff20000f
#define PIO_SWITCHES_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_SWITCHES_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_SWITCHES_CAPTURE 0
#define PIO_SWITCHES_DATA_WIDTH 10
#define PIO_SWITCHES_DO_TEST_BENCH_WIRING 0
#define PIO_SWITCHES_DRIVEN_SIM_VALUE 0
#define PIO_SWITCHES_EDGE_TYPE NONE
#define PIO_SWITCHES_FREQ 50000000
#define PIO_SWITCHES_HAS_IN 1
#define PIO_SWITCHES_HAS_OUT 0
#define PIO_SWITCHES_HAS_TRI 0
#define PIO_SWITCHES_IRQ_TYPE NONE
#define PIO_SWITCHES_RESET_VALUE 0

/*
 * Macros for device 'pio_leds', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_LEDS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_LEDS_COMPONENT_TYPE altera_avalon_pio
#define PIO_LEDS_COMPONENT_NAME pio_leds
#define PIO_LEDS_BASE 0xff200010
#define PIO_LEDS_SPAN 16
#define PIO_LEDS_END 0xff20001f
#define PIO_LEDS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_LEDS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_LEDS_CAPTURE 0
#define PIO_LEDS_DATA_WIDTH 10
#define PIO_LEDS_DO_TEST_BENCH_WIRING 0
#define PIO_LEDS_DRIVEN_SIM_VALUE 0
#define PIO_LEDS_EDGE_TYPE NONE
#define PIO_LEDS_FREQ 50000000
#define PIO_LEDS_HAS_IN 0
#define PIO_LEDS_HAS_OUT 1
#define PIO_LEDS_HAS_TRI 0
#define PIO_LEDS_IRQ_TYPE NONE
#define PIO_LEDS_RESET_VALUE 1

/*
 * Macros for device 'pio_keys', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_KEYS_'.
 * The prefix is the slave descriptor.
 */
#define PIO_KEYS_COMPONENT_TYPE altera_avalon_pio
#define PIO_KEYS_COMPONENT_NAME pio_keys
#define PIO_KEYS_BASE 0xff200020
#define PIO_KEYS_SPAN 16
#define PIO_KEYS_END 0xff20002f
#define PIO_KEYS_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_KEYS_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_KEYS_CAPTURE 0
#define PIO_KEYS_DATA_WIDTH 3
#define PIO_KEYS_DO_TEST_BENCH_WIRING 0
#define PIO_KEYS_DRIVEN_SIM_VALUE 0
#define PIO_KEYS_EDGE_TYPE NONE
#define PIO_KEYS_FREQ 50000000
#define PIO_KEYS_HAS_IN 1
#define PIO_KEYS_HAS_OUT 0
#define PIO_KEYS_HAS_TRI 0
#define PIO_KEYS_IRQ_TYPE NONE
#define PIO_KEYS_RESET_VALUE 0

/*
 * Macros for device 'pio_hex3_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX3_5_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX3_5_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX3_5_COMPONENT_NAME pio_hex3_5
#define PIO_HEX3_5_BASE 0xff200030
#define PIO_HEX3_5_SPAN 16
#define PIO_HEX3_5_END 0xff20003f
#define PIO_HEX3_5_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX3_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX3_5_CAPTURE 0
#define PIO_HEX3_5_DATA_WIDTH 21
#define PIO_HEX3_5_DO_TEST_BENCH_WIRING 0
#define PIO_HEX3_5_DRIVEN_SIM_VALUE 0
#define PIO_HEX3_5_EDGE_TYPE NONE
#define PIO_HEX3_5_FREQ 50000000
#define PIO_HEX3_5_HAS_IN 0
#define PIO_HEX3_5_HAS_OUT 1
#define PIO_HEX3_5_HAS_TRI 0
#define PIO_HEX3_5_IRQ_TYPE NONE
#define PIO_HEX3_5_RESET_VALUE 1963763

/*
 * Macros for device 'pio_hex0_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'PIO_HEX0_2_'.
 * The prefix is the slave descriptor.
 */
#define PIO_HEX0_2_COMPONENT_TYPE altera_avalon_pio
#define PIO_HEX0_2_COMPONENT_NAME pio_hex0_2
#define PIO_HEX0_2_BASE 0xff200040
#define PIO_HEX0_2_SPAN 16
#define PIO_HEX0_2_END 0xff20004f
#define PIO_HEX0_2_BIT_CLEARING_EDGE_REGISTER 0
#define PIO_HEX0_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define PIO_HEX0_2_CAPTURE 0
#define PIO_HEX0_2_DATA_WIDTH 21
#define PIO_HEX0_2_DO_TEST_BENCH_WIRING 0
#define PIO_HEX0_2_DRIVEN_SIM_VALUE 0
#define PIO_HEX0_2_EDGE_TYPE NONE
#define PIO_HEX0_2_FREQ 50000000
#define PIO_HEX0_2_HAS_IN 0
#define PIO_HEX0_2_HAS_OUT 1
#define PIO_HEX0_2_HAS_TRI 0
#define PIO_HEX0_2_IRQ_TYPE NONE
#define PIO_HEX0_2_RESET_VALUE 1797689

/*
 * Macros for device 'audio_audio_config', class 'altera_up_avalon_audio_and_video_config'
 * The macros are prefixed with 'AUDIO_AUDIO_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_AUDIO_CONFIG_COMPONENT_TYPE altera_up_avalon_audio_and_video_config
#define AUDIO_AUDIO_CONFIG_COMPONENT_NAME audio_audio_config
#define AUDIO_AUDIO_CONFIG_BASE 0xff200050
#define AUDIO_AUDIO_CONFIG_SPAN 16
#define AUDIO_AUDIO_CONFIG_END 0xff20005f

/*
 * Macros for device 'audio_I2S_Codec_Pin_Multiplex_0', class 'I2S_Codec_Pin_Multiplex'
 * The macros are prefixed with 'AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_'.
 * The prefix is the slave descriptor.
 */
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_COMPONENT_TYPE I2S_Codec_Pin_Multiplex
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_COMPONENT_NAME audio_I2S_Codec_Pin_Multiplex_0
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_BASE 0xff200060
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_SPAN 4
#define AUDIO_I2S_CODEC_PIN_MULTIPLEX_0_END 0xff200063

/*
 * Macros for device 'ASP_white_noise_right', class 'WhiteNoise'
 * The macros are prefixed with 'ASP_WHITE_NOISE_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_WHITE_NOISE_RIGHT_COMPONENT_TYPE WhiteNoise
#define ASP_WHITE_NOISE_RIGHT_COMPONENT_NAME ASP_white_noise_right
#define ASP_WHITE_NOISE_RIGHT_BASE 0xff200064
#define ASP_WHITE_NOISE_RIGHT_SPAN 4
#define ASP_WHITE_NOISE_RIGHT_END 0xff200067

/*
 * Macros for device 'ASP_mult_out', class 'Multiply'
 * The macros are prefixed with 'ASP_MULT_OUT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_MULT_OUT_COMPONENT_TYPE Multiply
#define ASP_MULT_OUT_COMPONENT_NAME ASP_mult_out
#define ASP_MULT_OUT_BASE 0xff200068
#define ASP_MULT_OUT_SPAN 8
#define ASP_MULT_OUT_END 0xff20006f

/*
 * Macros for device 'ASP_dds_right_s1_config', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_RIGHT_S1_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_RIGHT_S1_CONFIG_COMPONENT_TYPE Dds
#define ASP_DDS_RIGHT_S1_CONFIG_COMPONENT_NAME ASP_dds_right
#define ASP_DDS_RIGHT_S1_CONFIG_BASE 0xff200070
#define ASP_DDS_RIGHT_S1_CONFIG_SPAN 8
#define ASP_DDS_RIGHT_S1_CONFIG_END 0xff200077

/*
 * Macros for device 'ASP_dds_left_s1_config', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_LEFT_S1_CONFIG_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_LEFT_S1_CONFIG_COMPONENT_TYPE Dds
#define ASP_DDS_LEFT_S1_CONFIG_COMPONENT_NAME ASP_dds_left
#define ASP_DDS_LEFT_S1_CONFIG_BASE 0xff200078
#define ASP_DDS_LEFT_S1_CONFIG_SPAN 8
#define ASP_DDS_LEFT_S1_CONFIG_END 0xff20007f

/*
 * Macros for device 'ASP_white_noise_left', class 'WhiteNoise'
 * The macros are prefixed with 'ASP_WHITE_NOISE_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_WHITE_NOISE_LEFT_COMPONENT_TYPE WhiteNoise
#define ASP_WHITE_NOISE_LEFT_COMPONENT_NAME ASP_white_noise_left
#define ASP_WHITE_NOISE_LEFT_BASE 0xff200080
#define ASP_WHITE_NOISE_LEFT_SPAN 4
#define ASP_WHITE_NOISE_LEFT_END 0xff200083

/*
 * Macros for device 'ASP_mux_out', class 'ChannelMux'
 * The macros are prefixed with 'ASP_MUX_OUT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_MUX_OUT_COMPONENT_TYPE ChannelMux
#define ASP_MUX_OUT_COMPONENT_NAME ASP_mux_out
#define ASP_MUX_OUT_BASE 0xff200084
#define ASP_MUX_OUT_SPAN 4
#define ASP_MUX_OUT_END 0xff200087

/*
 * Macros for device 'ASP_delay_right', class 'Delay'
 * The macros are prefixed with 'ASP_DELAY_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DELAY_RIGHT_COMPONENT_TYPE Delay
#define ASP_DELAY_RIGHT_COMPONENT_NAME ASP_delay_right
#define ASP_DELAY_RIGHT_BASE 0xff200088
#define ASP_DELAY_RIGHT_SPAN 4
#define ASP_DELAY_RIGHT_END 0xff20008b

/*
 * Macros for device 'ASP_delay_left', class 'Delay'
 * The macros are prefixed with 'ASP_DELAY_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DELAY_LEFT_COMPONENT_TYPE Delay
#define ASP_DELAY_LEFT_COMPONENT_NAME ASP_delay_left
#define ASP_DELAY_LEFT_BASE 0xff20008c
#define ASP_DELAY_LEFT_SPAN 4
#define ASP_DELAY_LEFT_END 0xff20008f

/*
 * Macros for device 'ASP_channel_mux_in', class 'ChannelMux'
 * The macros are prefixed with 'ASP_CHANNEL_MUX_IN_'.
 * The prefix is the slave descriptor.
 */
#define ASP_CHANNEL_MUX_IN_COMPONENT_TYPE ChannelMux
#define ASP_CHANNEL_MUX_IN_COMPONENT_NAME ASP_channel_mux_in
#define ASP_CHANNEL_MUX_IN_BASE 0xff200090
#define ASP_CHANNEL_MUX_IN_SPAN 4
#define ASP_CHANNEL_MUX_IN_END 0xff200093

/*
 * Macros for device 'ASP_add_right_dds', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_RIGHT_DDS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_RIGHT_DDS_COMPONENT_TYPE AddChannels
#define ASP_ADD_RIGHT_DDS_COMPONENT_NAME ASP_add_right_dds
#define ASP_ADD_RIGHT_DDS_BASE 0xff200094
#define ASP_ADD_RIGHT_DDS_SPAN 4
#define ASP_ADD_RIGHT_DDS_END 0xff200097

/*
 * Macros for device 'ASP_add_right_noise', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_RIGHT_NOISE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_RIGHT_NOISE_COMPONENT_TYPE AddChannels
#define ASP_ADD_RIGHT_NOISE_COMPONENT_NAME ASP_add_right_noise
#define ASP_ADD_RIGHT_NOISE_BASE 0xff200098
#define ASP_ADD_RIGHT_NOISE_SPAN 4
#define ASP_ADD_RIGHT_NOISE_END 0xff20009b

/*
 * Macros for device 'ASP_add_left_noise', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_LEFT_NOISE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_LEFT_NOISE_COMPONENT_TYPE AddChannels
#define ASP_ADD_LEFT_NOISE_COMPONENT_NAME ASP_add_left_noise
#define ASP_ADD_LEFT_NOISE_BASE 0xff20009c
#define ASP_ADD_LEFT_NOISE_SPAN 4
#define ASP_ADD_LEFT_NOISE_END 0xff20009f

/*
 * Macros for device 'ASP_add_left_dds', class 'AddChannels'
 * The macros are prefixed with 'ASP_ADD_LEFT_DDS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_ADD_LEFT_DDS_COMPONENT_TYPE AddChannels
#define ASP_ADD_LEFT_DDS_COMPONENT_NAME ASP_add_left_dds
#define ASP_ADD_LEFT_DDS_BASE 0xff2000a0
#define ASP_ADD_LEFT_DDS_SPAN 4
#define ASP_ADD_LEFT_DDS_END 0xff2000a3

/*
 * Macros for device 'ASP_fir_left_s1_enable', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_LEFT_S1_ENABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_LEFT_S1_ENABLE_COMPONENT_TYPE FirFilter
#define ASP_FIR_LEFT_S1_ENABLE_COMPONENT_NAME ASP_fir_left
#define ASP_FIR_LEFT_S1_ENABLE_BASE 0xff2000a4
#define ASP_FIR_LEFT_S1_ENABLE_SPAN 4
#define ASP_FIR_LEFT_S1_ENABLE_END 0xff2000a7

/*
 * Macros for device 'ASP_fir_right_s1_enable', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_RIGHT_S1_ENABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_RIGHT_S1_ENABLE_COMPONENT_TYPE FirFilter
#define ASP_FIR_RIGHT_S1_ENABLE_COMPONENT_NAME ASP_fir_right
#define ASP_FIR_RIGHT_S1_ENABLE_BASE 0xff2000a8
#define ASP_FIR_RIGHT_S1_ENABLE_SPAN 4
#define ASP_FIR_RIGHT_S1_ENABLE_END 0xff2000ab

/*
 * Macros for device 'channel_mux_in_st_right', class 'ChannelMux'
 * The macros are prefixed with 'CHANNEL_MUX_IN_ST_RIGHT_'.
 * The prefix is the slave descriptor.
 */
#define CHANNEL_MUX_IN_ST_RIGHT_COMPONENT_TYPE ChannelMux
#define CHANNEL_MUX_IN_ST_RIGHT_COMPONENT_NAME channel_mux_in_st_right
#define CHANNEL_MUX_IN_ST_RIGHT_BASE 0xff2000ac
#define CHANNEL_MUX_IN_ST_RIGHT_SPAN 4
#define CHANNEL_MUX_IN_ST_RIGHT_END 0xff2000af

/*
 * Macros for device 'MMtoST_0', class 'MMtoST'
 * The macros are prefixed with 'MMTOST_0_'.
 * The prefix is the slave descriptor.
 */
#define MMTOST_0_COMPONENT_TYPE MMtoST
#define MMTOST_0_COMPONENT_NAME MMtoST_0
#define MMTOST_0_BASE 0xff2000b0
#define MMTOST_0_SPAN 16
#define MMTOST_0_END 0xff2000bf

/*
 * Macros for device 'channel_mux_in_st_left', class 'ChannelMux'
 * The macros are prefixed with 'CHANNEL_MUX_IN_ST_LEFT_'.
 * The prefix is the slave descriptor.
 */
#define CHANNEL_MUX_IN_ST_LEFT_COMPONENT_TYPE ChannelMux
#define CHANNEL_MUX_IN_ST_LEFT_COMPONENT_NAME channel_mux_in_st_left
#define CHANNEL_MUX_IN_ST_LEFT_BASE 0xff2000c0
#define CHANNEL_MUX_IN_ST_LEFT_SPAN 4
#define CHANNEL_MUX_IN_ST_LEFT_END 0xff2000c3

/*
 * Macros for device 'ASP_fir_right_s0_coeffs', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_RIGHT_S0_COEFFS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_RIGHT_S0_COEFFS_COMPONENT_TYPE FirFilter
#define ASP_FIR_RIGHT_S0_COEFFS_COMPONENT_NAME ASP_fir_right
#define ASP_FIR_RIGHT_S0_COEFFS_BASE 0xff200200
#define ASP_FIR_RIGHT_S0_COEFFS_SPAN 512
#define ASP_FIR_RIGHT_S0_COEFFS_END 0xff2003ff

/*
 * Macros for device 'ASP_fir_left_s0_coeffs', class 'FirFilter'
 * The macros are prefixed with 'ASP_FIR_LEFT_S0_COEFFS_'.
 * The prefix is the slave descriptor.
 */
#define ASP_FIR_LEFT_S0_COEFFS_COMPONENT_TYPE FirFilter
#define ASP_FIR_LEFT_S0_COEFFS_COMPONENT_NAME ASP_fir_left
#define ASP_FIR_LEFT_S0_COEFFS_BASE 0xff200400
#define ASP_FIR_LEFT_S0_COEFFS_SPAN 512
#define ASP_FIR_LEFT_S0_COEFFS_END 0xff2005ff

/*
 * Macros for device 'ASP_dds_right_s0_table', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_RIGHT_S0_TABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_RIGHT_S0_TABLE_COMPONENT_TYPE Dds
#define ASP_DDS_RIGHT_S0_TABLE_COMPONENT_NAME ASP_dds_right
#define ASP_DDS_RIGHT_S0_TABLE_BASE 0xff204000
#define ASP_DDS_RIGHT_S0_TABLE_SPAN 16384
#define ASP_DDS_RIGHT_S0_TABLE_END 0xff207fff

/*
 * Macros for device 'ASP_dds_left_s0_table', class 'Dds'
 * The macros are prefixed with 'ASP_DDS_LEFT_S0_TABLE_'.
 * The prefix is the slave descriptor.
 */
#define ASP_DDS_LEFT_S0_TABLE_COMPONENT_TYPE Dds
#define ASP_DDS_LEFT_S0_TABLE_COMPONENT_NAME ASP_dds_left
#define ASP_DDS_LEFT_S0_TABLE_BASE 0xff208000
#define ASP_DDS_LEFT_S0_TABLE_SPAN 16384
#define ASP_DDS_LEFT_S0_TABLE_END 0xff20bfff

/*
 * Macros for device 'ARM_A9_HPS_gmac0', class 'stmmac'
 * The macros are prefixed with 'ARM_A9_HPS_GMAC0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_GMAC0_COMPONENT_TYPE stmmac
#define ARM_A9_HPS_GMAC0_COMPONENT_NAME ARM_A9_HPS_gmac0
#define ARM_A9_HPS_GMAC0_BASE 0xff700000
#define ARM_A9_HPS_GMAC0_SPAN 8192
#define ARM_A9_HPS_GMAC0_END 0xff701fff

/*
 * Macros for device 'ARM_A9_HPS_gmac1', class 'stmmac'
 * The macros are prefixed with 'ARM_A9_HPS_GMAC1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_GMAC1_COMPONENT_TYPE stmmac
#define ARM_A9_HPS_GMAC1_COMPONENT_NAME ARM_A9_HPS_gmac1
#define ARM_A9_HPS_GMAC1_BASE 0xff702000
#define ARM_A9_HPS_GMAC1_SPAN 8192
#define ARM_A9_HPS_GMAC1_END 0xff703fff

/*
 * Macros for device 'ARM_A9_HPS_sdmmc', class 'sdmmc'
 * The macros are prefixed with 'ARM_A9_HPS_SDMMC_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SDMMC_COMPONENT_TYPE sdmmc
#define ARM_A9_HPS_SDMMC_COMPONENT_NAME ARM_A9_HPS_sdmmc
#define ARM_A9_HPS_SDMMC_BASE 0xff704000
#define ARM_A9_HPS_SDMMC_SPAN 4096
#define ARM_A9_HPS_SDMMC_END 0xff704fff

/*
 * Macros for device 'ARM_A9_HPS_qspi', class 'cadence_qspi'
 * The macros are prefixed with 'ARM_A9_HPS_QSPI_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_QSPI_COMPONENT_TYPE cadence_qspi
#define ARM_A9_HPS_QSPI_COMPONENT_NAME ARM_A9_HPS_qspi
#define ARM_A9_HPS_QSPI_BASE 0xff705000
#define ARM_A9_HPS_QSPI_SPAN 256
#define ARM_A9_HPS_QSPI_END 0xff7050ff

/*
 * Macros for device 'ARM_A9_HPS_fpgamgr', class 'altera_fpgamgr'
 * The macros are prefixed with 'ARM_A9_HPS_FPGAMGR_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_FPGAMGR_COMPONENT_TYPE altera_fpgamgr
#define ARM_A9_HPS_FPGAMGR_COMPONENT_NAME ARM_A9_HPS_fpgamgr
#define ARM_A9_HPS_FPGAMGR_BASE 0xff706000
#define ARM_A9_HPS_FPGAMGR_SPAN 4096
#define ARM_A9_HPS_FPGAMGR_END 0xff706fff

/*
 * Macros for device 'ARM_A9_HPS_gpio0', class 'dw_gpio'
 * The macros are prefixed with 'ARM_A9_HPS_GPIO0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_GPIO0_COMPONENT_TYPE dw_gpio
#define ARM_A9_HPS_GPIO0_COMPONENT_NAME ARM_A9_HPS_gpio0
#define ARM_A9_HPS_GPIO0_BASE 0xff708000
#define ARM_A9_HPS_GPIO0_SPAN 256
#define ARM_A9_HPS_GPIO0_END 0xff7080ff

/*
 * Macros for device 'ARM_A9_HPS_gpio1', class 'dw_gpio'
 * The macros are prefixed with 'ARM_A9_HPS_GPIO1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_GPIO1_COMPONENT_TYPE dw_gpio
#define ARM_A9_HPS_GPIO1_COMPONENT_NAME ARM_A9_HPS_gpio1
#define ARM_A9_HPS_GPIO1_BASE 0xff709000
#define ARM_A9_HPS_GPIO1_SPAN 256
#define ARM_A9_HPS_GPIO1_END 0xff7090ff

/*
 * Macros for device 'ARM_A9_HPS_gpio2', class 'dw_gpio'
 * The macros are prefixed with 'ARM_A9_HPS_GPIO2_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_GPIO2_COMPONENT_TYPE dw_gpio
#define ARM_A9_HPS_GPIO2_COMPONENT_NAME ARM_A9_HPS_gpio2
#define ARM_A9_HPS_GPIO2_BASE 0xff70a000
#define ARM_A9_HPS_GPIO2_SPAN 256
#define ARM_A9_HPS_GPIO2_END 0xff70a0ff

/*
 * Macros for device 'ARM_A9_HPS_l3regs', class 'altera_l3regs'
 * The macros are prefixed with 'ARM_A9_HPS_L3REGS_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_L3REGS_COMPONENT_TYPE altera_l3regs
#define ARM_A9_HPS_L3REGS_COMPONENT_NAME ARM_A9_HPS_l3regs
#define ARM_A9_HPS_L3REGS_BASE 0xff800000
#define ARM_A9_HPS_L3REGS_SPAN 4096
#define ARM_A9_HPS_L3REGS_END 0xff800fff

/*
 * Macros for device 'ARM_A9_HPS_nand0', class 'denali_nand'
 * The macros are prefixed with 'ARM_A9_HPS_NAND0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_NAND0_COMPONENT_TYPE denali_nand
#define ARM_A9_HPS_NAND0_COMPONENT_NAME ARM_A9_HPS_nand0
#define ARM_A9_HPS_NAND0_BASE 0xff900000
#define ARM_A9_HPS_NAND0_SPAN 65536
#define ARM_A9_HPS_NAND0_END 0xff90ffff

/*
 * Macros for device 'ARM_A9_HPS_usb0', class 'usb'
 * The macros are prefixed with 'ARM_A9_HPS_USB0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_USB0_COMPONENT_TYPE usb
#define ARM_A9_HPS_USB0_COMPONENT_NAME ARM_A9_HPS_usb0
#define ARM_A9_HPS_USB0_BASE 0xffb00000
#define ARM_A9_HPS_USB0_SPAN 262144
#define ARM_A9_HPS_USB0_END 0xffb3ffff

/*
 * Macros for device 'ARM_A9_HPS_usb1', class 'usb'
 * The macros are prefixed with 'ARM_A9_HPS_USB1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_USB1_COMPONENT_TYPE usb
#define ARM_A9_HPS_USB1_COMPONENT_NAME ARM_A9_HPS_usb1
#define ARM_A9_HPS_USB1_BASE 0xffb40000
#define ARM_A9_HPS_USB1_SPAN 262144
#define ARM_A9_HPS_USB1_END 0xffb7ffff

/*
 * Macros for device 'ARM_A9_HPS_dcan0', class 'bosch_dcan'
 * The macros are prefixed with 'ARM_A9_HPS_DCAN0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_DCAN0_COMPONENT_TYPE bosch_dcan
#define ARM_A9_HPS_DCAN0_COMPONENT_NAME ARM_A9_HPS_dcan0
#define ARM_A9_HPS_DCAN0_BASE 0xffc00000
#define ARM_A9_HPS_DCAN0_SPAN 4096
#define ARM_A9_HPS_DCAN0_END 0xffc00fff

/*
 * Macros for device 'ARM_A9_HPS_dcan1', class 'bosch_dcan'
 * The macros are prefixed with 'ARM_A9_HPS_DCAN1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_DCAN1_COMPONENT_TYPE bosch_dcan
#define ARM_A9_HPS_DCAN1_COMPONENT_NAME ARM_A9_HPS_dcan1
#define ARM_A9_HPS_DCAN1_BASE 0xffc01000
#define ARM_A9_HPS_DCAN1_SPAN 4096
#define ARM_A9_HPS_DCAN1_END 0xffc01fff

/*
 * Macros for device 'ARM_A9_HPS_uart0', class 'snps_uart'
 * The macros are prefixed with 'ARM_A9_HPS_UART0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_UART0_COMPONENT_TYPE snps_uart
#define ARM_A9_HPS_UART0_COMPONENT_NAME ARM_A9_HPS_uart0
#define ARM_A9_HPS_UART0_BASE 0xffc02000
#define ARM_A9_HPS_UART0_SPAN 256
#define ARM_A9_HPS_UART0_END 0xffc020ff
#define ARM_A9_HPS_UART0_FIFO_DEPTH 128
#define ARM_A9_HPS_UART0_FIFO_HWFC 0
#define ARM_A9_HPS_UART0_FIFO_MODE 1
#define ARM_A9_HPS_UART0_FIFO_SWFC 0
#define ARM_A9_HPS_UART0_FREQ 100000000

/*
 * Macros for device 'ARM_A9_HPS_uart1', class 'snps_uart'
 * The macros are prefixed with 'ARM_A9_HPS_UART1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_UART1_COMPONENT_TYPE snps_uart
#define ARM_A9_HPS_UART1_COMPONENT_NAME ARM_A9_HPS_uart1
#define ARM_A9_HPS_UART1_BASE 0xffc03000
#define ARM_A9_HPS_UART1_SPAN 256
#define ARM_A9_HPS_UART1_END 0xffc030ff
#define ARM_A9_HPS_UART1_FIFO_DEPTH 128
#define ARM_A9_HPS_UART1_FIFO_HWFC 0
#define ARM_A9_HPS_UART1_FIFO_MODE 1
#define ARM_A9_HPS_UART1_FIFO_SWFC 0
#define ARM_A9_HPS_UART1_FREQ 100000000

/*
 * Macros for device 'ARM_A9_HPS_i2c0', class 'designware_i2c'
 * The macros are prefixed with 'ARM_A9_HPS_I2C0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_I2C0_COMPONENT_TYPE designware_i2c
#define ARM_A9_HPS_I2C0_COMPONENT_NAME ARM_A9_HPS_i2c0
#define ARM_A9_HPS_I2C0_BASE 0xffc04000
#define ARM_A9_HPS_I2C0_SPAN 256
#define ARM_A9_HPS_I2C0_END 0xffc040ff

/*
 * Macros for device 'ARM_A9_HPS_i2c1', class 'designware_i2c'
 * The macros are prefixed with 'ARM_A9_HPS_I2C1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_I2C1_COMPONENT_TYPE designware_i2c
#define ARM_A9_HPS_I2C1_COMPONENT_NAME ARM_A9_HPS_i2c1
#define ARM_A9_HPS_I2C1_BASE 0xffc05000
#define ARM_A9_HPS_I2C1_SPAN 256
#define ARM_A9_HPS_I2C1_END 0xffc050ff

/*
 * Macros for device 'ARM_A9_HPS_i2c2', class 'designware_i2c'
 * The macros are prefixed with 'ARM_A9_HPS_I2C2_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_I2C2_COMPONENT_TYPE designware_i2c
#define ARM_A9_HPS_I2C2_COMPONENT_NAME ARM_A9_HPS_i2c2
#define ARM_A9_HPS_I2C2_BASE 0xffc06000
#define ARM_A9_HPS_I2C2_SPAN 256
#define ARM_A9_HPS_I2C2_END 0xffc060ff

/*
 * Macros for device 'ARM_A9_HPS_i2c3', class 'designware_i2c'
 * The macros are prefixed with 'ARM_A9_HPS_I2C3_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_I2C3_COMPONENT_TYPE designware_i2c
#define ARM_A9_HPS_I2C3_COMPONENT_NAME ARM_A9_HPS_i2c3
#define ARM_A9_HPS_I2C3_BASE 0xffc07000
#define ARM_A9_HPS_I2C3_SPAN 256
#define ARM_A9_HPS_I2C3_END 0xffc070ff

/*
 * Macros for device 'ARM_A9_HPS_timer0', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'ARM_A9_HPS_TIMER0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_TIMER0_COMPONENT_TYPE dw_apb_timer_sp
#define ARM_A9_HPS_TIMER0_COMPONENT_NAME ARM_A9_HPS_timer0
#define ARM_A9_HPS_TIMER0_BASE 0xffc08000
#define ARM_A9_HPS_TIMER0_SPAN 256
#define ARM_A9_HPS_TIMER0_END 0xffc080ff

/*
 * Macros for device 'ARM_A9_HPS_timer1', class 'dw_apb_timer_sp'
 * The macros are prefixed with 'ARM_A9_HPS_TIMER1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_TIMER1_COMPONENT_TYPE dw_apb_timer_sp
#define ARM_A9_HPS_TIMER1_COMPONENT_NAME ARM_A9_HPS_timer1
#define ARM_A9_HPS_TIMER1_BASE 0xffc09000
#define ARM_A9_HPS_TIMER1_SPAN 256
#define ARM_A9_HPS_TIMER1_END 0xffc090ff

/*
 * Macros for device 'ARM_A9_HPS_sdrctl', class 'altera_sdrctl'
 * The macros are prefixed with 'ARM_A9_HPS_SDRCTL_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SDRCTL_COMPONENT_TYPE altera_sdrctl
#define ARM_A9_HPS_SDRCTL_COMPONENT_NAME ARM_A9_HPS_sdrctl
#define ARM_A9_HPS_SDRCTL_BASE 0xffc25000
#define ARM_A9_HPS_SDRCTL_SPAN 4096
#define ARM_A9_HPS_SDRCTL_END 0xffc25fff

/*
 * Macros for device 'ARM_A9_HPS_timer2', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'ARM_A9_HPS_TIMER2_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_TIMER2_COMPONENT_TYPE dw_apb_timer_osc
#define ARM_A9_HPS_TIMER2_COMPONENT_NAME ARM_A9_HPS_timer2
#define ARM_A9_HPS_TIMER2_BASE 0xffd00000
#define ARM_A9_HPS_TIMER2_SPAN 256
#define ARM_A9_HPS_TIMER2_END 0xffd000ff

/*
 * Macros for device 'ARM_A9_HPS_timer3', class 'dw_apb_timer_osc'
 * The macros are prefixed with 'ARM_A9_HPS_TIMER3_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_TIMER3_COMPONENT_TYPE dw_apb_timer_osc
#define ARM_A9_HPS_TIMER3_COMPONENT_NAME ARM_A9_HPS_timer3
#define ARM_A9_HPS_TIMER3_BASE 0xffd01000
#define ARM_A9_HPS_TIMER3_SPAN 256
#define ARM_A9_HPS_TIMER3_END 0xffd010ff

/*
 * Macros for device 'ARM_A9_HPS_wd_timer0', class 'dw_wd_timer'
 * The macros are prefixed with 'ARM_A9_HPS_WD_TIMER0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_WD_TIMER0_COMPONENT_TYPE dw_wd_timer
#define ARM_A9_HPS_WD_TIMER0_COMPONENT_NAME ARM_A9_HPS_wd_timer0
#define ARM_A9_HPS_WD_TIMER0_BASE 0xffd02000
#define ARM_A9_HPS_WD_TIMER0_SPAN 256
#define ARM_A9_HPS_WD_TIMER0_END 0xffd020ff

/*
 * Macros for device 'ARM_A9_HPS_wd_timer1', class 'dw_wd_timer'
 * The macros are prefixed with 'ARM_A9_HPS_WD_TIMER1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_WD_TIMER1_COMPONENT_TYPE dw_wd_timer
#define ARM_A9_HPS_WD_TIMER1_COMPONENT_NAME ARM_A9_HPS_wd_timer1
#define ARM_A9_HPS_WD_TIMER1_BASE 0xffd03000
#define ARM_A9_HPS_WD_TIMER1_SPAN 256
#define ARM_A9_HPS_WD_TIMER1_END 0xffd030ff

/*
 * Macros for device 'ARM_A9_HPS_clkmgr', class 'asimov_clkmgr'
 * The macros are prefixed with 'ARM_A9_HPS_CLKMGR_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_CLKMGR_COMPONENT_TYPE asimov_clkmgr
#define ARM_A9_HPS_CLKMGR_COMPONENT_NAME ARM_A9_HPS_clkmgr
#define ARM_A9_HPS_CLKMGR_BASE 0xffd04000
#define ARM_A9_HPS_CLKMGR_SPAN 4096
#define ARM_A9_HPS_CLKMGR_END 0xffd04fff

/*
 * Macros for device 'ARM_A9_HPS_rstmgr', class 'altera_rstmgr'
 * The macros are prefixed with 'ARM_A9_HPS_RSTMGR_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_RSTMGR_COMPONENT_TYPE altera_rstmgr
#define ARM_A9_HPS_RSTMGR_COMPONENT_NAME ARM_A9_HPS_rstmgr
#define ARM_A9_HPS_RSTMGR_BASE 0xffd05000
#define ARM_A9_HPS_RSTMGR_SPAN 256
#define ARM_A9_HPS_RSTMGR_END 0xffd050ff

/*
 * Macros for device 'ARM_A9_HPS_sysmgr', class 'altera_sysmgr'
 * The macros are prefixed with 'ARM_A9_HPS_SYSMGR_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SYSMGR_COMPONENT_TYPE altera_sysmgr
#define ARM_A9_HPS_SYSMGR_COMPONENT_NAME ARM_A9_HPS_sysmgr
#define ARM_A9_HPS_SYSMGR_BASE 0xffd08000
#define ARM_A9_HPS_SYSMGR_SPAN 1024
#define ARM_A9_HPS_SYSMGR_END 0xffd083ff

/*
 * Macros for device 'ARM_A9_HPS_dma', class 'arm_pl330_dma'
 * The macros are prefixed with 'ARM_A9_HPS_DMA_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_DMA_COMPONENT_TYPE arm_pl330_dma
#define ARM_A9_HPS_DMA_COMPONENT_NAME ARM_A9_HPS_dma
#define ARM_A9_HPS_DMA_BASE 0xffe01000
#define ARM_A9_HPS_DMA_SPAN 4096
#define ARM_A9_HPS_DMA_END 0xffe01fff

/*
 * Macros for device 'ARM_A9_HPS_spim0', class 'spi'
 * The macros are prefixed with 'ARM_A9_HPS_SPIM0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SPIM0_COMPONENT_TYPE spi
#define ARM_A9_HPS_SPIM0_COMPONENT_NAME ARM_A9_HPS_spim0
#define ARM_A9_HPS_SPIM0_BASE 0xfff00000
#define ARM_A9_HPS_SPIM0_SPAN 256
#define ARM_A9_HPS_SPIM0_END 0xfff000ff

/*
 * Macros for device 'ARM_A9_HPS_spim1', class 'spi'
 * The macros are prefixed with 'ARM_A9_HPS_SPIM1_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SPIM1_COMPONENT_TYPE spi
#define ARM_A9_HPS_SPIM1_COMPONENT_NAME ARM_A9_HPS_spim1
#define ARM_A9_HPS_SPIM1_BASE 0xfff01000
#define ARM_A9_HPS_SPIM1_SPAN 256
#define ARM_A9_HPS_SPIM1_END 0xfff010ff

/*
 * Macros for device 'ARM_A9_HPS_scu', class 'scu'
 * The macros are prefixed with 'ARM_A9_HPS_SCU_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_SCU_COMPONENT_TYPE scu
#define ARM_A9_HPS_SCU_COMPONENT_NAME ARM_A9_HPS_scu
#define ARM_A9_HPS_SCU_BASE 0xfffec000
#define ARM_A9_HPS_SCU_SPAN 256
#define ARM_A9_HPS_SCU_END 0xfffec0ff

/*
 * Macros for device 'ARM_A9_HPS_timer', class 'arm_internal_timer'
 * The macros are prefixed with 'ARM_A9_HPS_TIMER_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_TIMER_COMPONENT_TYPE arm_internal_timer
#define ARM_A9_HPS_TIMER_COMPONENT_NAME ARM_A9_HPS_timer
#define ARM_A9_HPS_TIMER_BASE 0xfffec600
#define ARM_A9_HPS_TIMER_SPAN 256
#define ARM_A9_HPS_TIMER_END 0xfffec6ff

/*
 * Macros for device 'ARM_A9_HPS_arm_gic_0', class 'arm_gic'
 * The macros are prefixed with 'ARM_A9_HPS_ARM_GIC_0_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_ARM_GIC_0_COMPONENT_TYPE arm_gic
#define ARM_A9_HPS_ARM_GIC_0_COMPONENT_NAME ARM_A9_HPS_arm_gic_0
#define ARM_A9_HPS_ARM_GIC_0_BASE 0xfffed000
#define ARM_A9_HPS_ARM_GIC_0_SPAN 4096
#define ARM_A9_HPS_ARM_GIC_0_END 0xfffedfff

/*
 * Macros for device 'ARM_A9_HPS_L2', class 'arm_pl310_L2'
 * The macros are prefixed with 'ARM_A9_HPS_L2_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_L2_COMPONENT_TYPE arm_pl310_L2
#define ARM_A9_HPS_L2_COMPONENT_NAME ARM_A9_HPS_L2
#define ARM_A9_HPS_L2_BASE 0xfffef000
#define ARM_A9_HPS_L2_SPAN 4096
#define ARM_A9_HPS_L2_END 0xfffeffff

/*
 * Macros for device 'ARM_A9_HPS_axi_ocram', class 'axi_ocram'
 * The macros are prefixed with 'ARM_A9_HPS_AXI_OCRAM_'.
 * The prefix is the slave descriptor.
 */
#define ARM_A9_HPS_AXI_OCRAM_COMPONENT_TYPE axi_ocram
#define ARM_A9_HPS_AXI_OCRAM_COMPONENT_NAME ARM_A9_HPS_axi_ocram
#define ARM_A9_HPS_AXI_OCRAM_BASE 0xffff0000
#define ARM_A9_HPS_AXI_OCRAM_SPAN 65536
#define ARM_A9_HPS_AXI_OCRAM_END 0xffffffff
#define ARM_A9_HPS_AXI_OCRAM_SIZE_MULTIPLE 1
#define ARM_A9_HPS_AXI_OCRAM_SIZE_VALUE 1<<16
#define ARM_A9_HPS_AXI_OCRAM_WRITABLE 1
#define ARM_A9_HPS_AXI_OCRAM_MEMORY_INFO_GENERATE_DAT_SYM 0
#define ARM_A9_HPS_AXI_OCRAM_MEMORY_INFO_GENERATE_HEX 0
#define ARM_A9_HPS_AXI_OCRAM_MEMORY_INFO_MEM_INIT_DATA_WIDTH 16


#endif /* _ALTERA_ARM_A9_HPS_ARM_A9_0_H_ */
